From d621749288b2a4439d5cd9f27b6da927ecfebc6d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Alexander=20S=C3=B6derberg?= <sauilitired@gmail.com>
Date: Mon, 7 Oct 2019 14:20:46 +0200
Subject: [PATCH] Remove tests :)


diff --git a/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java b/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java
deleted file mode 100644
index 328c5147..00000000
--- a/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java
+++ /dev/null
@@ -1,25 +0,0 @@
-/*
- * Copyright (c) 2018 Daniel Ennis (Aikar) MIT License
- */
-
-package com.destroystokyo.paper;
-
-import org.bukkit.Bukkit;
-import org.bukkit.TestServer;
-import org.junit.Test;
-
-import java.util.logging.Level;
-
-public class MaterialTagsTest {
-    @Test
-    public void testInitialize() {
-        try {
-            TestServer.getInstance();
-            MaterialTags.SHULKER_BOXES.getValues();
-            assert true;
-        } catch (Throwable e) {
-            Bukkit.getLogger().log(Level.SEVERE, e.getMessage(), e);
-            assert false;
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/AnnotationTest.java b/src/test/java/org/bukkit/AnnotationTest.java
deleted file mode 100644
index af2abd47..00000000
--- a/src/test/java/org/bukkit/AnnotationTest.java
+++ /dev/null
@@ -1,256 +0,0 @@
-package org.bukkit;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.net.URISyntaxException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-import org.junit.Assert;
-import org.junit.Test;
-import org.objectweb.asm.ClassReader;
-import org.objectweb.asm.Opcodes;
-import org.objectweb.asm.Type;
-import org.objectweb.asm.tree.AnnotationNode;
-import org.objectweb.asm.tree.ClassNode;
-import org.objectweb.asm.tree.MethodNode;
-import org.objectweb.asm.tree.ParameterNode;
-
-public class AnnotationTest {
-
-    private static final String[] ACCEPTED_ANNOTATIONS = {
-        "Lorg/jetbrains/annotations/Nullable;",
-        "Lorg/jetbrains/annotations/NotNull;",
-        "Lorg/jetbrains/annotations/Contract;",
-        "Lorg/bukkit/UndefinedNullability;"
-    };
-
-    private static final String[] EXCLUDED_CLASSES = {
-        // Internal technical classes
-        "org/bukkit/plugin/java/JavaPluginLoader",
-        "org/bukkit/util/io/BukkitObjectInputStream",
-        "org/bukkit/util/io/BukkitObjectOutputStream",
-        "org/bukkit/util/io/Wrapper",
-        "org/bukkit/plugin/java/PluginClassLoader",
-        // Generic functional interface
-        "org/bukkit/util/Consumer",
-        // Paper start
-        // Timings history is broken in terms of nullability due to guavas Function defining that the param is NonNull
-        "co/aikar/timings/TimingHistory$2",
-        "co/aikar/timings/TimingHistory$2$1",
-        "co/aikar/timings/TimingHistory$2$1$1",
-        "co/aikar/timings/TimingHistory$2$1$2",
-        "co/aikar/timings/TimingHistory$3",
-        "co/aikar/timings/TimingHistory$4",
-        "co/aikar/timings/TimingHistoryEntry$1"
-        // Paper end
-    };
-
-    @Test
-    public void testAll() throws IOException, URISyntaxException {
-        URL loc = Bukkit.class.getProtectionDomain().getCodeSource().getLocation();
-        File file = new File(loc.toURI());
-
-        // Running from jar is not supported yet
-        Assert.assertTrue("code must be in a directory", file.isDirectory());
-
-        final HashMap<String, ClassNode> foundClasses = new HashMap<>();
-        collectClasses(file, foundClasses);
-
-        final ArrayList<String> errors = new ArrayList<>();
-
-        for (ClassNode clazz : foundClasses.values()) {
-            if (!isClassIncluded(clazz, foundClasses)) {
-                continue;
-            }
-
-            for (MethodNode method : clazz.methods) {
-                if (!isMethodIncluded(clazz, method, foundClasses)) {
-                    continue;
-                }
-
-                if (mustBeAnnotated(Type.getReturnType(method.desc)) && !isWellAnnotated(method.invisibleAnnotations)) {
-                    warn(errors, clazz, method, "return value");
-                }
-
-                Type[] paramTypes = Type.getArgumentTypes(method.desc);
-                List<ParameterNode> parameters = method.parameters;
-
-                for (int i = 0; i < paramTypes.length; i++) {
-                    if (mustBeAnnotated(paramTypes[i]) && !isWellAnnotated(method.invisibleParameterAnnotations == null ? null : method.invisibleParameterAnnotations[i])) {
-                        ParameterNode paramNode = parameters == null ? null : parameters.get(i);
-                        String paramName = paramNode == null ? null : paramNode.name;
-
-                        warn(errors, clazz, method, "parameter " + i + (paramName == null ? "" : ": " + paramName));
-                    }
-                }
-            }
-        }
-
-        if (errors.isEmpty()) {
-            // Success
-            return;
-        }
-
-        Collections.sort(errors);
-
-        System.out.println(errors.size() + " missing annotation(s):");
-        for (String message : errors) {
-            System.out.print("\t");
-            System.out.println(message);
-        }
-
-        Assert.fail("There " + errors.size() + " are missing annotation(s)");
-    }
-
-    private static void collectClasses(@NotNull File from, @NotNull Map<String, ClassNode> to) throws IOException {
-        if (from.isDirectory()) {
-            final File[] files = from.listFiles();
-            assert files != null;
-
-            for (File file : files) {
-                collectClasses(file, to);
-            }
-            return;
-        }
-
-        if (!from.getName().endsWith(".class")) {
-            return;
-        }
-
-        try (FileInputStream in = new FileInputStream(from)) {
-            final ClassReader cr = new ClassReader(in);
-
-            final ClassNode node = new ClassNode();
-            cr.accept(node, ClassReader.SKIP_CODE | ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
-
-            to.put(node.name, node);
-        }
-    }
-
-    private static boolean isClassIncluded(@NotNull ClassNode clazz, @NotNull Map<String, ClassNode> allClasses) {
-        // Exclude private, synthetic or deprecated classes and annotations, since their members can't be null
-        if ((clazz.access & (Opcodes.ACC_PRIVATE | Opcodes.ACC_SYNTHETIC | Opcodes.ACC_DEPRECATED | Opcodes.ACC_ANNOTATION)) != 0) {
-            return false;
-        }
-
-        if (isSubclassOf(clazz, "org/bukkit/material/MaterialData", allClasses)) {
-            throw new AssertionError("Subclass of MaterialData must be deprecated: " + clazz.name);
-        }
-
-        if (isSubclassOf(clazz, "java/lang/Exception", allClasses)
-                || isSubclassOf(clazz, "java/lang/RuntimeException", allClasses)) {
-            // Exceptions are excluded
-            return false;
-        }
-
-        for (String excludedClass : EXCLUDED_CLASSES) {
-            if (excludedClass.equals(clazz.name)) {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
-    private static boolean isMethodIncluded(@NotNull ClassNode clazz, @NotNull MethodNode method, @NotNull Map<String, ClassNode> allClasses) {
-        // Exclude private, synthetic and deprecated methods
-        if ((method.access & (Opcodes.ACC_PRIVATE | Opcodes.ACC_SYNTHETIC | Opcodes.ACC_DEPRECATED)) != 0 || (method.access & (Opcodes.ACC_PRIVATE | Opcodes.ACC_PROTECTED | Opcodes.ACC_PUBLIC)) == 0) { // Paper - ignore package-private
-            return false;
-        }
-
-        // Exclude Java methods
-        if (is(method, "toString", 0) || is(method, "clone", 0) || is(method, "equals", 1)) {
-            return false;
-        }
-
-        // Exclude generated Enum methods
-        if (isSubclassOf(clazz, "java/lang/Enum", allClasses) && (is(method, "values", 0) || is(method, "valueOf", 1))) {
-            return false;
-        }
-
-        // Anonymous classes have generated constructors, which can't be annotated nor invoked
-        if ("<init>".equals(method.name) && isAnonymous(clazz)) {
-            return false;
-        }
-
-        return true;
-    }
-
-    private static boolean isWellAnnotated(@Nullable List<AnnotationNode> annotations) {
-        if (annotations == null) {
-            return false;
-        }
-
-        for (AnnotationNode node : annotations) {
-            for (String acceptedAnnotation : ACCEPTED_ANNOTATIONS) {
-                if (acceptedAnnotation.equals(node.desc)) {
-                    return true;
-                }
-            }
-        }
-
-        return false;
-    }
-
-    private static boolean mustBeAnnotated(@NotNull Type type) {
-        return type.getSort() == Type.ARRAY || type.getSort() == Type.OBJECT;
-    }
-
-    private static boolean is(@NotNull MethodNode method, @NotNull String name, int parameters) {
-        final List<ParameterNode> params = method.parameters;
-        return method.name.equals(name) && (params == null || params.size() == parameters);
-    }
-
-    /**
-     * @return true if given class is anonymous
-     */
-    private static boolean isAnonymous(@NotNull ClassNode clazz) {
-        final String name = clazz.name;
-        if (name == null) {
-            return false;
-        }
-        final int nestedSeparator = name.lastIndexOf('$');
-        if (nestedSeparator == -1 || nestedSeparator + 1 == name.length()) {
-            return false;
-        }
-
-        // Nested classes have purely numeric names. Java classes can't begin with a number,
-        // so if first character is a number, the class must be anonymous
-        final char c = name.charAt(nestedSeparator + 1);
-        return c >= '0' && c <= '9';
-    }
-
-    private static boolean isSubclassOf(@NotNull ClassNode what, @NotNull String ofWhat, @NotNull Map<String, ClassNode> allClasses) {
-        if (ofWhat.equals(what.name)
-                // Not only optimization: Super class may not be present in allClasses, so it is checked here
-                || ofWhat.equals(what.superName)) {
-            return true;
-        }
-
-        final ClassNode parent = allClasses.get(what.superName);
-        if (parent != null && isSubclassOf(parent, ofWhat, allClasses)) {
-            return true;
-        }
-
-        for (String superInterface : what.interfaces) {
-            final ClassNode interfaceParent = allClasses.get(superInterface);
-            if (interfaceParent != null && isSubclassOf(interfaceParent, ofWhat, allClasses)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    private static void warn(@NotNull Collection<String> out, @NotNull ClassNode clazz, @NotNull MethodNode method, @NotNull String description) {
-        out.add(clazz.name + " \t" + method.name + " \t" + description);
-    }
-}
diff --git a/src/test/java/org/bukkit/ArtTest.java b/src/test/java/org/bukkit/ArtTest.java
deleted file mode 100644
index 2e9249a6..00000000
--- a/src/test/java/org/bukkit/ArtTest.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class ArtTest {
-
-    @Test(expected = IllegalArgumentException.class)
-    public void getByNullName() {
-        Art.getByName(null);
-    }
-
-    @Test
-    public void getById() {
-        for (Art art : Art.values()) {
-            assertThat(Art.getById(art.getId()), is(art));
-        }
-    }
-
-    @Test
-    public void getByName() {
-        for (Art art : Art.values()) {
-            assertThat(Art.getByName(art.toString()), is(art));
-        }
-    }
-
-    @Test
-    public void dimensionSanityCheck() {
-        for (Art art : Art.values()) {
-            assertThat(art.getBlockHeight(), is(greaterThan(0)));
-            assertThat(art.getBlockWidth(), is(greaterThan(0)));
-        }
-    }
-
-    @Test
-    public void getByNameWithMixedCase() {
-        Art subject = Art.values()[0];
-        String name = subject.toString().replace('E', 'e');
-
-        assertThat(Art.getByName(name), is(subject));
-    }
-}
diff --git a/src/test/java/org/bukkit/BukkitMirrorTest.java b/src/test/java/org/bukkit/BukkitMirrorTest.java
deleted file mode 100644
index 6ea9c3ca..00000000
--- a/src/test/java/org/bukkit/BukkitMirrorTest.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.base.Function;
-import com.google.common.collect.Lists;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.Arrays;
-import java.util.List;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class BukkitMirrorTest {
-
-    @Parameters(name="{index}: {1}")
-    public static List<Object[]> data() {
-        return Lists.transform(Arrays.asList(Server.class.getDeclaredMethods()), new Function<Method, Object[]>() {
-            @Override
-            public Object[] apply(Method input) {
-                return new Object[] {
-                    input,
-                    input.toGenericString().substring("public abstract ".length()).replace("(", "{").replace(")", "}")
-                    };
-            }
-        });
-    }
-
-    @Parameter(0)
-    public Method server;
-
-    @Parameter(1)
-    public String name;
-
-    private Method bukkit;
-
-    @Before
-    public void makeBukkit() throws Throwable {
-        bukkit = Bukkit.class.getDeclaredMethod(server.getName(), server.getParameterTypes());
-    }
-
-    @Test
-    public void isStatic() throws Throwable {
-        assertThat(Modifier.isStatic(bukkit.getModifiers()), is(true));
-    }
-
-    @Test
-    public void isDeprecated() throws Throwable {
-        assertThat(bukkit.isAnnotationPresent(Deprecated.class), is(server.isAnnotationPresent(Deprecated.class)));
-    }
-
-    @Test
-    public void returnType() throws Throwable {
-        assertThat(bukkit.getReturnType(), is((Object) server.getReturnType()));
-        // assertThat(bukkit.getGenericReturnType(), is(server.getGenericReturnType())); // too strict on <T> type generics
-    }
-
-    @Test
-    public void parameterTypes() throws Throwable {
-        // assertThat(bukkit.getGenericParameterTypes(), is(server.getGenericParameterTypes())); // too strict on <T> type generics
-    }
-
-    @Test
-    public void declaredException() throws Throwable {
-        assertThat(bukkit.getGenericExceptionTypes(), is(server.getGenericExceptionTypes()));
-    }
-}
diff --git a/src/test/java/org/bukkit/ChatColorTest.java b/src/test/java/org/bukkit/ChatColorTest.java
deleted file mode 100644
index 2a8c8c72..00000000
--- a/src/test/java/org/bukkit/ChatColorTest.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class ChatColorTest {
-
-    @Test
-    public void getByChar() {
-        for (ChatColor color : ChatColor.values()) {
-            assertThat(ChatColor.getByChar(color.getChar()), is(color));
-        }
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void getByStringWithNull() {
-        ChatColor.getByChar((String) null);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void getByStringWithEmpty() {
-        ChatColor.getByChar("");
-    }
-
-    @Test
-    public void getByNull() {
-        assertThat(ChatColor.stripColor(null), is(nullValue()));
-    }
-
-    @Test
-    public void getByString() {
-        for (ChatColor color : ChatColor.values()) {
-            assertThat(ChatColor.getByChar(String.valueOf(color.getChar())), is(color));
-        }
-    }
-
-    @Test
-    public void stripColorOnNullString() {
-        assertThat(ChatColor.stripColor(null), is(nullValue()));
-    }
-
-    @Test
-    public void stripColor() {
-        StringBuilder subject = new StringBuilder();
-        StringBuilder expected = new StringBuilder();
-
-        final String filler = "test";
-        for (ChatColor color : ChatColor.values()) {
-            subject.append(color).append(filler);
-            expected.append(filler);
-        }
-
-        assertThat(ChatColor.stripColor(subject.toString()), is(expected.toString()));
-    }
-
-    @Test
-    public void toStringWorks() {
-        for (ChatColor color : ChatColor.values()) {
-            assertThat(String.format("%c%c", ChatColor.COLOR_CHAR, color.getChar()), is(color.toString()));
-        }
-    }
-
-    @Test
-    public void translateAlternateColorCodes() {
-        String s = "&0&1&2&3&4&5&6&7&8&9&A&a&B&b&C&c&D&d&E&e&F&f&K&k & more";
-        String t = ChatColor.translateAlternateColorCodes('&', s);
-        String u = ChatColor.BLACK.toString() + ChatColor.DARK_BLUE + ChatColor.DARK_GREEN + ChatColor.DARK_AQUA + ChatColor.DARK_RED + ChatColor.DARK_PURPLE + ChatColor.GOLD + ChatColor.GRAY + ChatColor.DARK_GRAY + ChatColor.BLUE + ChatColor.GREEN + ChatColor.GREEN + ChatColor.AQUA + ChatColor.AQUA + ChatColor.RED + ChatColor.RED + ChatColor.LIGHT_PURPLE + ChatColor.LIGHT_PURPLE + ChatColor.YELLOW + ChatColor.YELLOW + ChatColor.WHITE + ChatColor.WHITE + ChatColor.MAGIC + ChatColor.MAGIC + " & more";
-        assertThat(t, is(u));
-    }
-
-    @Test
-    public void getChatColors() {
-        String s = String.format("%c%ctest%c%ctest%c", ChatColor.COLOR_CHAR, ChatColor.RED.getChar(), ChatColor.COLOR_CHAR, ChatColor.ITALIC.getChar(), ChatColor.COLOR_CHAR);
-        String expected = ChatColor.RED.toString() + ChatColor.ITALIC;
-        assertThat(ChatColor.getLastColors(s), is(expected));
-
-        s = String.format("%c%ctest%c%ctest", ChatColor.COLOR_CHAR, ChatColor.RED.getChar(), ChatColor.COLOR_CHAR, ChatColor.BLUE.getChar());
-        assertThat(ChatColor.getLastColors(s), is(ChatColor.BLUE.toString()));
-    }
-}
diff --git a/src/test/java/org/bukkit/ChatPaginatorTest.java b/src/test/java/org/bukkit/ChatPaginatorTest.java
deleted file mode 100644
index d38e64f0..00000000
--- a/src/test/java/org/bukkit/ChatPaginatorTest.java
+++ /dev/null
@@ -1,172 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.bukkit.util.ChatPaginator;
-import org.junit.Test;
-
-public class ChatPaginatorTest {
-    @Test
-    public void testWordWrap1() {
-        String rawString = ChatColor.RED + "123456789 123456789 123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 19);
-
-        assertThat(lines.length, is(2));
-        assertThat(lines[0], is(ChatColor.RED + "123456789 123456789"));
-        assertThat(lines[1], is(ChatColor.RED.toString() + "123456789"));
-    }
-
-    @Test
-    public void testWordWrap2() {
-        String rawString = "123456789 123456789 123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 22);
-
-        assertThat(lines.length, is(2));
-        assertThat(lines[0], is(ChatColor.WHITE.toString() + "123456789 123456789"));
-        assertThat(lines[1], is(ChatColor.WHITE.toString() + "123456789"));
-    }
-
-    @Test
-    public void testWordWrap3() {
-        String rawString = ChatColor.RED + "123456789 " + ChatColor.RED + ChatColor.RED + "123456789 " + ChatColor.RED + "123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 16);
-
-        assertThat(lines.length, is(3));
-        assertThat(lines[0], is(ChatColor.RED + "123456789"));
-        assertThat(lines[1], is(ChatColor.RED.toString() + ChatColor.RED + "123456789"));
-        assertThat(lines[2], is(ChatColor.RED + "123456789"));
-    }
-
-    @Test
-    public void testWordWrap4() {
-        String rawString = "123456789 123456789 123456789 12345";
-        String[] lines = ChatPaginator.wordWrap(rawString, 19);
-
-        assertThat(lines.length, is(2));
-        assertThat(lines[0], is(ChatColor.WHITE.toString() + "123456789 123456789"));
-        assertThat(lines[1], is(ChatColor.WHITE.toString() + "123456789 12345"));
-    }
-
-    @Test
-    public void testWordWrap5() {
-        String rawString = "123456789\n123456789 123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 19);
-
-        assertThat(lines.length, is(2));
-        assertThat(lines[0], is(ChatColor.WHITE.toString() + "123456789"));
-        assertThat(lines[1], is(ChatColor.WHITE.toString() + "123456789 123456789"));
-    }
-
-    @Test
-    public void testWordWrap6() {
-        String rawString = "12345678   23456789 123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 19);
-
-        assertThat(lines.length, is(2));
-        assertThat(lines[0], is(ChatColor.WHITE.toString() + "12345678   23456789"));
-        assertThat(lines[1], is(ChatColor.WHITE.toString() + "123456789"));
-    }
-
-    @Test
-    public void testWordWrap7() {
-        String rawString = "12345678   23456789   123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 19);
-
-        assertThat(lines.length, is(2));
-        assertThat(lines[0], is(ChatColor.WHITE.toString() + "12345678   23456789"));
-        assertThat(lines[1], is(ChatColor.WHITE.toString() + "123456789"));
-    }
-
-    @Test
-    public void testWordWrap8() {
-        String rawString = "123456789 123456789 123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 6);
-
-        assertThat(lines.length, is(6));
-        assertThat(lines[0], is(ChatColor.WHITE.toString() + "123456"));
-        assertThat(lines[1], is(ChatColor.WHITE.toString() + "789"));
-        assertThat(lines[2], is(ChatColor.WHITE.toString() + "123456"));
-        assertThat(lines[3], is(ChatColor.WHITE.toString() + "789"));
-        assertThat(lines[4], is(ChatColor.WHITE.toString() + "123456"));
-        assertThat(lines[5], is(ChatColor.WHITE.toString() + "789"));
-    }
-
-    @Test
-    public void testWordWrap9() {
-        String rawString = "1234 123456789 123456789 123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 6);
-
-        assertThat(lines.length, is(7));
-        assertThat(lines[0], is(ChatColor.WHITE.toString() + "1234"));
-        assertThat(lines[1], is(ChatColor.WHITE.toString() + "123456"));
-        assertThat(lines[2], is(ChatColor.WHITE.toString() + "789"));
-        assertThat(lines[3], is(ChatColor.WHITE.toString() + "123456"));
-        assertThat(lines[4], is(ChatColor.WHITE.toString() + "789"));
-        assertThat(lines[5], is(ChatColor.WHITE.toString() + "123456"));
-        assertThat(lines[6], is(ChatColor.WHITE.toString() + "789"));
-    }
-
-    @Test
-    public void testWordWrap10() {
-        String rawString = "123456789\n123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 19);
-
-        assertThat(lines.length, is(2));
-        assertThat(lines[0], is(ChatColor.WHITE.toString() + "123456789"));
-        assertThat(lines[1], is(ChatColor.WHITE.toString() + "123456789"));
-    }
-
-    @Test
-    public void testWordWrap11() {
-        String rawString = ChatColor.RED + "a a a " + ChatColor.BLUE + "a a";
-        String[] lines = ChatPaginator.wordWrap(rawString, 9);
-
-        assertThat(lines.length, is(1));
-        assertThat(lines[0], is(ChatColor.RED + "a a a " + ChatColor.BLUE + "a a"));
-    }
-
-    @Test
-    public void testWordWrap12() {
-        String rawString = "123 1 123";
-        String[] lines = ChatPaginator.wordWrap(rawString, 5);
-
-        assertThat(lines.length, is(2));
-        assertThat(lines[0], is(ChatColor.WHITE.toString() + "123 1"));
-        assertThat(lines[1], is(ChatColor.WHITE.toString() + "123"));
-    }
-
-    @Test
-    public void testPaginate1() {
-        String rawString = "1234 123456789 123456789 123456789";
-        ChatPaginator.ChatPage page = ChatPaginator.paginate(rawString, 1, 6, 2);
-
-        assertThat(page.getPageNumber(), is(1));
-        assertThat(page.getTotalPages(), is(4));
-        assertThat(page.getLines().length, is(2));
-        assertThat(page.getLines()[0], is(ChatColor.WHITE.toString() + "1234"));
-        assertThat(page.getLines()[1], is(ChatColor.WHITE.toString() + "123456"));
-    }
-
-    @Test
-    public void testPaginate2() {
-        String rawString = "1234 123456789 123456789 123456789";
-        ChatPaginator.ChatPage page = ChatPaginator.paginate(rawString, 2, 6, 2);
-
-        assertThat(page.getPageNumber(), is(2));
-        assertThat(page.getTotalPages(), is(4));
-        assertThat(page.getLines().length, is(2));
-        assertThat(page.getLines()[0], is(ChatColor.WHITE.toString() + "789"));
-        assertThat(page.getLines()[1], is(ChatColor.WHITE.toString() + "123456"));
-    }
-
-    @Test
-    public void testPaginate3() {
-        String rawString = "1234 123456789 123456789 123456789";
-        ChatPaginator.ChatPage page = ChatPaginator.paginate(rawString, 4, 6, 2);
-
-        assertThat(page.getPageNumber(), is(4));
-        assertThat(page.getTotalPages(), is(4));
-        assertThat(page.getLines().length, is(1));
-        assertThat(page.getLines()[0], is(ChatColor.WHITE.toString() + "789"));
-    }
-}
diff --git a/src/test/java/org/bukkit/CoalTypeTest.java b/src/test/java/org/bukkit/CoalTypeTest.java
deleted file mode 100644
index b90f10c4..00000000
--- a/src/test/java/org/bukkit/CoalTypeTest.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class CoalTypeTest {
-    @Test
-    public void getByData() {
-        for (CoalType coalType : CoalType.values()) {
-            assertThat(CoalType.getByData(coalType.getData()), is(coalType));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/ColorTest.java b/src/test/java/org/bukkit/ColorTest.java
deleted file mode 100644
index 78fc76e9..00000000
--- a/src/test/java/org/bukkit/ColorTest.java
+++ /dev/null
@@ -1,364 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import org.bukkit.configuration.file.YamlConfiguration;
-import org.junit.Test;
-
-@SuppressWarnings("javadoc")
-public class ColorTest {
-    static class TestColor {
-        static int id = 0;
-        final String name;
-        final int rgb;
-        final int bgr;
-        final int r;
-        final int g;
-        final int b;
-
-        TestColor(int rgb, int bgr, int r, int g, int b) {
-            this.rgb = rgb;
-            this.bgr = bgr;
-            this.r = r;
-            this.g = g;
-            this.b = b;
-            this.name = id + ":" + Integer.toHexString(rgb).toUpperCase() + "_" + Integer.toHexString(bgr).toUpperCase() + "-r" + Integer.toHexString(r).toUpperCase() + "-g" + Integer.toHexString(g).toUpperCase() + "-b" + Integer.toHexString(b).toUpperCase();
-        }
-    }
-
-    static TestColor[] examples = new TestColor[] {
-        /*            0xRRGGBB, 0xBBGGRR, 0xRR, 0xGG, 0xBB */
-        new TestColor(0xFFFFFF, 0xFFFFFF, 0xFF, 0xFF, 0xFF),
-        new TestColor(0xFFFFAA, 0xAAFFFF, 0xFF, 0xFF, 0xAA),
-        new TestColor(0xFF00FF, 0xFF00FF, 0xFF, 0x00, 0xFF),
-        new TestColor(0x67FF22, 0x22FF67, 0x67, 0xFF, 0x22),
-        new TestColor(0x000000, 0x000000, 0x00, 0x00, 0x00)
-    };
-
-    @Test
-    public void testSerialization() throws Throwable {
-        for (TestColor testColor : examples) {
-            Color base = Color.fromRGB(testColor.rgb);
-
-            YamlConfiguration toSerialize = new YamlConfiguration();
-            toSerialize.set("color", base);
-            String serialized = toSerialize.saveToString();
-
-            YamlConfiguration deserialized = new YamlConfiguration();
-            deserialized.loadFromString(serialized);
-
-            assertThat(testColor.name + " on " + serialized, base, is(deserialized.getColor("color")));
-        }
-    }
-
-    // Equality tests
-    @Test
-    public void testEqualities() {
-        for (TestColor testColor : examples) {
-            Color fromRGB = Color.fromRGB(testColor.rgb);
-            Color fromBGR = Color.fromBGR(testColor.bgr);
-            Color fromRGBs = Color.fromRGB(testColor.r, testColor.g, testColor.b);
-            Color fromBGRs = Color.fromBGR(testColor.b, testColor.g, testColor.r);
-
-            assertThat(testColor.name, fromRGB, is(fromRGBs));
-            assertThat(testColor.name, fromRGB, is(fromBGR));
-            assertThat(testColor.name, fromRGB, is(fromBGRs));
-            assertThat(testColor.name, fromRGBs, is(fromBGR));
-            assertThat(testColor.name, fromRGBs, is(fromBGRs));
-            assertThat(testColor.name, fromBGR, is(fromBGRs));
-        }
-    }
-
-    @Test
-    public void testInequalities() {
-        for (int i = 1; i < examples.length; i++) {
-            TestColor testFrom = examples[i];
-            Color from = Color.fromRGB(testFrom.rgb);
-            for (int j = i - 1; j >= 0; j--) {
-                TestColor testTo = examples[j];
-                Color to = Color.fromRGB(testTo.rgb);
-                String name = testFrom.name + " to " + testTo.name;
-                assertThat(name, from, is(not(to)));
-
-                Color transform = from.setRed(testTo.r).setBlue(testTo.b).setGreen(testTo.g);
-                assertThat(name, transform, is(not(sameInstance(from))));
-                assertThat(name, transform, is(to));
-            }
-        }
-    }
-
-    // RGB tests
-    @Test
-    public void testRGB() {
-        for (TestColor testColor : examples) {
-            assertThat(testColor.name, Color.fromRGB(testColor.rgb).asRGB(), is(testColor.rgb));
-            assertThat(testColor.name, Color.fromBGR(testColor.bgr).asRGB(), is(testColor.rgb));
-            assertThat(testColor.name, Color.fromRGB(testColor.r, testColor.g, testColor.b).asRGB(), is(testColor.rgb));
-            assertThat(testColor.name, Color.fromBGR(testColor.b, testColor.g, testColor.r).asRGB(), is(testColor.rgb));
-        }
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidRGB1() {
-        Color.fromRGB(0x01000000);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidRGB2() {
-        Color.fromRGB(Integer.MIN_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidRGB3() {
-        Color.fromRGB(Integer.MAX_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidRGB4() {
-        Color.fromRGB(-1);
-    }
-
-    // BGR tests
-    @Test
-    public void testBGR() {
-        for (TestColor testColor : examples) {
-            assertThat(testColor.name, Color.fromRGB(testColor.rgb).asBGR(), is(testColor.bgr));
-            assertThat(testColor.name, Color.fromBGR(testColor.bgr).asBGR(), is(testColor.bgr));
-            assertThat(testColor.name, Color.fromRGB(testColor.r, testColor.g, testColor.b).asBGR(), is(testColor.bgr));
-            assertThat(testColor.name, Color.fromBGR(testColor.b, testColor.g, testColor.r).asBGR(), is(testColor.bgr));
-        }
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidBGR1() {
-        Color.fromBGR(0x01000000);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidBGR2() {
-        Color.fromBGR(Integer.MIN_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidBGR3() {
-        Color.fromBGR(Integer.MAX_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidBGR4() {
-        Color.fromBGR(-1);
-    }
-
-    // Red tests
-    @Test
-    public void testRed() {
-        for (TestColor testColor : examples) {
-            assertThat(testColor.name, Color.fromRGB(testColor.rgb).getRed(), is(testColor.r));
-            assertThat(testColor.name, Color.fromBGR(testColor.bgr).getRed(), is(testColor.r));
-            assertThat(testColor.name, Color.fromRGB(testColor.r, testColor.g, testColor.b).getRed(), is(testColor.r));
-            assertThat(testColor.name, Color.fromBGR(testColor.b, testColor.g, testColor.r).getRed(), is(testColor.r));
-        }
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidR01() {
-        Color.fromRGB(-1, 0x00, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidR02() {
-        Color.fromRGB(Integer.MAX_VALUE, 0x00, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidR03() {
-        Color.fromRGB(Integer.MIN_VALUE, 0x00, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidR04() {
-        Color.fromRGB(0x100, 0x00, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidR05() {
-        Color.fromBGR(0x00, 0x00, -1);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidR06() {
-        Color.fromBGR(0x00, 0x00, Integer.MAX_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidR07() {
-        Color.fromBGR(0x00, 0x00, Integer.MIN_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidR08() {
-        Color.fromBGR(0x00, 0x00, 0x100);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidR09() {
-        Color.WHITE.setRed(-1);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidR10() {
-        Color.WHITE.setRed(Integer.MAX_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidR11() {
-        Color.WHITE.setRed(Integer.MIN_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidR12() {
-        Color.WHITE.setRed(0x100);
-    }
-
-    // Blue tests
-    @Test
-    public void testBlue() {
-        for (TestColor testColor : examples) {
-            assertThat(testColor.name, Color.fromRGB(testColor.rgb).getBlue(), is(testColor.b));
-            assertThat(testColor.name, Color.fromBGR(testColor.bgr).getBlue(), is(testColor.b));
-            assertThat(testColor.name, Color.fromRGB(testColor.r, testColor.g, testColor.b).getBlue(), is(testColor.b));
-            assertThat(testColor.name, Color.fromBGR(testColor.b, testColor.g, testColor.r).getBlue(), is(testColor.b));
-        }
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidB01() {
-        Color.fromRGB(0x00, 0x00, -1);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidB02() {
-        Color.fromRGB(0x00, 0x00, Integer.MAX_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidB03() {
-        Color.fromRGB(0x00, 0x00, Integer.MIN_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidB04() {
-        Color.fromRGB(0x00, 0x00, 0x100);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidB05() {
-        Color.fromBGR(-1, 0x00, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidB06() {
-        Color.fromBGR(Integer.MAX_VALUE, 0x00, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidB07() {
-        Color.fromBGR(Integer.MIN_VALUE, 0x00, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidB08() {
-        Color.fromBGR(0x100, 0x00, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidB09() {
-        Color.WHITE.setBlue(-1);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidB10() {
-        Color.WHITE.setBlue(Integer.MAX_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidB11() {
-        Color.WHITE.setBlue(Integer.MIN_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidB12() {
-        Color.WHITE.setBlue(0x100);
-    }
-
-    // Green tests
-    @Test
-    public void testGreen() {
-        for (TestColor testColor : examples) {
-            assertThat(testColor.name, Color.fromRGB(testColor.rgb).getGreen(), is(testColor.g));
-            assertThat(testColor.name, Color.fromBGR(testColor.bgr).getGreen(), is(testColor.g));
-            assertThat(testColor.name, Color.fromRGB(testColor.r, testColor.g, testColor.b).getGreen(), is(testColor.g));
-            assertThat(testColor.name, Color.fromBGR(testColor.b, testColor.g, testColor.r).getGreen(), is(testColor.g));
-        }
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidG01() {
-        Color.fromRGB(0x00, -1, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidG02() {
-        Color.fromRGB(0x00, Integer.MAX_VALUE, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidG03() {
-        Color.fromRGB(0x00, Integer.MIN_VALUE, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidG04() {
-        Color.fromRGB(0x00, 0x100, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidG05() {
-        Color.fromBGR(0x00, -1, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidG06() {
-        Color.fromBGR(0x00, Integer.MAX_VALUE, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidG07() {
-        Color.fromBGR(0x00, Integer.MIN_VALUE, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidG08() {
-        Color.fromBGR(0x00, 0x100, 0x00);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidG09() {
-        Color.WHITE.setGreen(-1);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidG10() {
-        Color.WHITE.setGreen(Integer.MAX_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidG11() {
-        Color.WHITE.setGreen(Integer.MIN_VALUE);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testInvalidG12() {
-        Color.WHITE.setGreen(0x100);
-    }
-}
diff --git a/src/test/java/org/bukkit/CropStateTest.java b/src/test/java/org/bukkit/CropStateTest.java
deleted file mode 100644
index 5cd9d6d2..00000000
--- a/src/test/java/org/bukkit/CropStateTest.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class CropStateTest {
-    @Test
-    public void getByData() {
-        for (CropState cropState : CropState.values()) {
-            assertThat(CropState.getByData(cropState.getData()), is(cropState));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/DifficultyTest.java b/src/test/java/org/bukkit/DifficultyTest.java
deleted file mode 100644
index d7fe8d39..00000000
--- a/src/test/java/org/bukkit/DifficultyTest.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class DifficultyTest {
-    @Test
-    public void getByValue() {
-        for (Difficulty difficulty : Difficulty.values()) {
-            assertThat(Difficulty.getByValue(difficulty.getValue()), is(difficulty));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/DyeColorTest.java b/src/test/java/org/bukkit/DyeColorTest.java
deleted file mode 100644
index 38769c1d..00000000
--- a/src/test/java/org/bukkit/DyeColorTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.util.ArrayList;
-import java.util.List;
-import org.bukkit.material.Colorable;
-import org.bukkit.material.Dye;
-import org.bukkit.material.Wool;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class DyeColorTest {
-
-    @Parameters(name= "{index}: {0}")
-    public static List<Object[]> data() {
-        List<Object[]> list = new ArrayList<Object[]>();
-        for (DyeColor dye : DyeColor.values()) {
-            list.add(new Object[] {dye});
-        }
-        return list;
-    }
-
-    @Parameter public DyeColor dye;
-
-    @Test
-    @SuppressWarnings("deprecation")
-    public void getByData() {
-        byte data = dye.getWoolData();
-
-        DyeColor byData = DyeColor.getByWoolData(data);
-        assertThat(byData, is(dye));
-    }
-
-    @Test
-    public void getByWoolData() {
-        byte data = dye.getWoolData();
-
-        DyeColor byData = DyeColor.getByWoolData(data);
-        assertThat(byData, is(dye));
-    }
-
-    @Test
-    public void getByDyeData() {
-        byte data = dye.getDyeData();
-
-        DyeColor byData = DyeColor.getByDyeData(data);
-        assertThat(byData, is(dye));
-    }
-
-    @Test
-    public void getDyeDyeColor() {
-        testColorable(new Dye(Material.LEGACY_INK_SACK, dye.getDyeData()));
-        testColorable(new Dye(dye));
-    }
-
-    @Test
-    public void getWoolDyeColor() {
-        testColorable(new Wool(Material.LEGACY_WOOL, dye.getWoolData()));
-    }
-
-    private void testColorable(final Colorable colorable) {
-        assertThat(colorable.getColor(), is(this.dye));
-    }
-}
diff --git a/src/test/java/org/bukkit/EffectTest.java b/src/test/java/org/bukkit/EffectTest.java
deleted file mode 100644
index 54e621e8..00000000
--- a/src/test/java/org/bukkit/EffectTest.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class EffectTest {
-    @Test
-    public void getById() {
-        for (Effect effect : Effect.values()) {
-            assertThat(Effect.getById(effect.getId()), is(effect));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/EntityEffectTest.java b/src/test/java/org/bukkit/EntityEffectTest.java
deleted file mode 100644
index a50dac4f..00000000
--- a/src/test/java/org/bukkit/EntityEffectTest.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class EntityEffectTest {
-    @Test
-    public void getByData() {
-        for (EntityEffect entityEffect : EntityEffect.values()) {
-            assertThat(EntityEffect.getByData(entityEffect.getData()), is(entityEffect));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/GameModeTest.java b/src/test/java/org/bukkit/GameModeTest.java
deleted file mode 100644
index 1c53e8ed..00000000
--- a/src/test/java/org/bukkit/GameModeTest.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class GameModeTest {
-    @Test
-    public void getByValue() {
-        for (GameMode gameMode : GameMode.values()) {
-            assertThat(GameMode.getByValue(gameMode.getValue()), is(gameMode));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/GrassSpeciesTest.java b/src/test/java/org/bukkit/GrassSpeciesTest.java
deleted file mode 100644
index 39f1b899..00000000
--- a/src/test/java/org/bukkit/GrassSpeciesTest.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class GrassSpeciesTest {
-    @Test
-    public void getByData() {
-        for (GrassSpecies grassSpecies : GrassSpecies.values()) {
-            assertThat(GrassSpecies.getByData(grassSpecies.getData()), is(grassSpecies));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/InstrumentTest.java b/src/test/java/org/bukkit/InstrumentTest.java
deleted file mode 100644
index f6d261ae..00000000
--- a/src/test/java/org/bukkit/InstrumentTest.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class InstrumentTest {
-    @Test
-    public void getByType() {
-        for (Instrument instrument : Instrument.values()) {
-            assertThat(Instrument.getByType(instrument.getType()), is(instrument));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/LocationTest.java b/src/test/java/org/bukkit/LocationTest.java
deleted file mode 100644
index 5cd8a0d3..00000000
--- a/src/test/java/org/bukkit/LocationTest.java
+++ /dev/null
@@ -1,202 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.ImmutableList;
-import java.util.List;
-import java.util.Random;
-import org.bukkit.util.Vector;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class LocationTest {
-    private static final double delta = 1.0 / 1000000;
-    /**
-     * <pre>
-     * a² + b² = c², a = b
-     * => 2∙(a²) = 2∙(b²) = c², c = 1
-     * => 2∙(a²) = 1
-     * => a² = 1/2
-     * => a = √(1/2) ∎
-     * </pre>
-     */
-    private static final double HALF_UNIT = Math.sqrt(1 / 2f);
-    /**
-     * <pre>
-     * a² + b² = c², c = √(1/2)
-     * => a² + b² = √(1/2)², a = b
-     * => 2∙(a²) = 2∙(b²) = 1/2
-     * => a² = 1/4
-     * => a = √(1/4) ∎
-     * </pre>
-     */
-    private static final double HALF_HALF_UNIT = Math.sqrt(1 / 4f);
-
-    @Parameters(name= "{index}: {0}")
-    public static List<Object[]> data() {
-        Random RANDOM = new Random(1L); // Test is deterministic
-        int r = 0;
-        return ImmutableList.<Object[]>of(
-            new Object[] { "X",
-                1, 0, 0,
-                270, 0
-            },
-            new Object[] { "-X",
-                -1, 0, 0,
-                90, 0
-            },
-            new Object[] { "Z",
-                0, 0, 1,
-                0, 0
-            },
-            new Object[] { "-Z",
-                0, 0, -1,
-                180, 0
-            },
-            new Object[] { "Y",
-                0, 1, 0,
-                0, -90 // Zero is here as a "default" value
-            },
-            new Object[] { "-Y",
-                0, -1, 0,
-                0, 90 // Zero is here as a "default" value
-            },
-            new Object[] { "X Z",
-                HALF_UNIT, 0, HALF_UNIT,
-                (270 + 360) / 2, 0
-            },
-            new Object[] { "X -Z",
-                HALF_UNIT, 0, -HALF_UNIT,
-                (270 + 180) / 2, 0
-            },
-            new Object[] { "-X -Z",
-                -HALF_UNIT, 0, -HALF_UNIT,
-                (90 + 180) / 2, 0
-            },
-            new Object[] { "-X Z",
-                -HALF_UNIT, 0, HALF_UNIT,
-                (90 + 0) / 2, 0
-            },
-            new Object[] { "X Y Z",
-                HALF_HALF_UNIT, HALF_UNIT, HALF_HALF_UNIT,
-                (270 + 360) / 2, -45
-            },
-            new Object[] { "-X -Y -Z",
-                -HALF_HALF_UNIT, -HALF_UNIT, -HALF_HALF_UNIT,
-                (90 + 180) / 2, 45
-            },
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++),
-            getRandom(RANDOM, r++)
-        );
-    }
-
-    private static Object[] getRandom(Random random, int index) {
-        final double YAW_FACTOR = 360;
-        final double YAW_OFFSET = 0;
-        final double PITCH_FACTOR = 180;
-        final double PITCH_OFFSET = -90;
-        final double CARTESIAN_FACTOR = 256;
-        final double CARTESIAN_OFFSET = -128;
-
-        Vector vector;
-        Location location;
-        if (random.nextBoolean()) {
-            float pitch = (float) (random.nextDouble() * PITCH_FACTOR + PITCH_OFFSET);
-            float yaw = (float) (random.nextDouble() * YAW_FACTOR + YAW_OFFSET);
-
-            location = getEmptyLocation();
-            location.setPitch(pitch);
-            location.setYaw(yaw);
-
-            vector = location.getDirection();
-        } else {
-            double x = random.nextDouble() * CARTESIAN_FACTOR + CARTESIAN_OFFSET;
-            double y = random.nextDouble() * CARTESIAN_FACTOR + CARTESIAN_OFFSET;
-            double z = random.nextDouble() * CARTESIAN_FACTOR + CARTESIAN_OFFSET;
-
-            location = getEmptyLocation();
-            vector = new Vector(x, y, z).normalize();
-
-            location.setDirection(vector);
-        }
-
-        return new Object[] { "R" + index,
-            vector.getX(), vector.getY(), vector.getZ(),
-            location.getYaw(), location.getPitch()
-        };
-    }
-
-    @Parameter(0)
-    public String nane;
-    @Parameter(1)
-    public double x;
-    @Parameter(2)
-    public double y;
-    @Parameter(3)
-    public double z;
-    @Parameter(4)
-    public float yaw;
-    @Parameter(5)
-    public float pitch;
-
-    @Test
-    public void testExpectedPitchYaw() {
-        Location location = getEmptyLocation().setDirection(getVector());
-
-        assertThat((double) location.getYaw(), is(closeTo(yaw, delta)));
-        assertThat((double) location.getPitch(), is(closeTo(pitch, delta)));
-    }
-
-    @Test
-    public void testExpectedXYZ() {
-        Vector vector = getLocation().getDirection();
-
-        assertThat(vector.getX(), is(closeTo(x, delta)));
-        assertThat(vector.getY(), is(closeTo(y, delta)));
-        assertThat(vector.getZ(), is(closeTo(z, delta)));
-    }
-
-    @Test
-    public void testEquals() {
-        Location first = getLocation().add(getVector());
-        Location second = getLocation().add(getVector());
-
-        assertThat(first.hashCode(), is(second.hashCode()));
-        assertThat(first, is(second));
-    }
-
-    private Vector getVector() {
-        return new Vector(x, y, z);
-    }
-
-    private static Location getEmptyLocation() {
-        return new Location(TestWorld.INSTANCE, 0, 0, 0);
-    }
-
-    private Location getLocation() {
-        Location location = getEmptyLocation();
-        location.setYaw(yaw);
-        location.setPitch(pitch);
-        return location;
-    }
-}
diff --git a/src/test/java/org/bukkit/MaterialTest.java b/src/test/java/org/bukkit/MaterialTest.java
deleted file mode 100644
index 6b0eaaad..00000000
--- a/src/test/java/org/bukkit/MaterialTest.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import org.bukkit.material.MaterialData;
-import org.junit.Test;
-
-public class MaterialTest {
-    @Test
-    public void getByName() {
-        for (Material material : Material.values()) {
-            assertThat(Material.getMaterial(material.toString()), is(material));
-        }
-    }
-
-    @Test
-    public void getByNameNull() {
-        assertThat(Material.getMaterial(null), is(nullValue()));
-    }
-
-    @Test
-    public void getData() {
-        for (Material material : Material.values()) {
-            if (!material.isLegacy()) {
-                continue;
-            }
-            Class<? extends MaterialData> clazz = material.getData();
-
-            assertThat(material.getNewData((byte) 0), is(instanceOf(clazz)));
-        }
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void matchMaterialByNull() {
-        Material.matchMaterial(null);
-    }
-
-    @Test
-    public void matchMaterialByName() {
-        for (Material material : Material.values()) {
-            assertThat(Material.matchMaterial(material.toString()), is(material));
-        }
-    }
-
-    @Test
-    public void matchMaterialByKey() {
-        for (Material material : Material.values()) {
-            if (material.isLegacy()) {
-                continue;
-            }
-            assertThat(Material.matchMaterial(material.getKey().toString()), is(material));
-        }
-    }
-
-    @Test
-    public void matchMaterialByWrongNamespace() {
-        for (Material material : Material.values()) {
-            if (material.isLegacy()) {
-                continue;
-            }
-            assertNull(Material.matchMaterial("bogus:" + material.getKey().getKey()));
-        }
-    }
-
-    @Test
-    public void matchMaterialByLowerCaseAndSpaces() {
-        for (Material material : Material.values()) {
-            String name = material.toString().replaceAll("_", " ").toLowerCase(java.util.Locale.ENGLISH);
-            assertThat(Material.matchMaterial(name), is(material));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/NamespacedKeyTest.java b/src/test/java/org/bukkit/NamespacedKeyTest.java
deleted file mode 100644
index 8c5e5ca7..00000000
--- a/src/test/java/org/bukkit/NamespacedKeyTest.java
+++ /dev/null
@@ -1,59 +0,0 @@
-package org.bukkit;
-
-import org.junit.Assert;
-import org.junit.Test;
-
-public class NamespacedKeyTest {
-
-    @Test
-    public void testValid() {
-        Assert.assertEquals("minecraft:foo", new NamespacedKey("minecraft", "foo").toString());
-        Assert.assertEquals("minecraft:foo/bar", new NamespacedKey("minecraft", "foo/bar").toString());
-        Assert.assertEquals("minecraft:foo/bar_baz", new NamespacedKey("minecraft", "foo/bar_baz").toString());
-        Assert.assertEquals("minecraft:foo/bar_baz-qux", new NamespacedKey("minecraft", "foo/bar_baz-qux").toString());
-        Assert.assertEquals("minecraft:foo/bar_baz-qux.quux", new NamespacedKey("minecraft", "foo/bar_baz-qux.quux").toString());
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testEmptyNamespace() {
-        new NamespacedKey("", "foo").toString();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testEmptyKey() {
-        new NamespacedKey("minecraft", "").toString();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testInvalidNamespace() {
-        new NamespacedKey("minecraft/test", "foo").toString();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testInvalidNamespaceCasing() {
-        new NamespacedKey("Minecraft", "foo").toString();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testInvalidKeyCasing() {
-        new NamespacedKey("minecraft", "Foo").toString();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testInvalidKey() {
-        new NamespacedKey("minecraft", "foo!").toString();
-    }
-
-    @Test
-    public void testBelowLength() {
-        new NamespacedKey("loremipsumdolorsitametconsecteturadipiscingelitduisvolutpatvelitsitametmaximusscelerisquemorbiullamcorperexacconsequategestas",
-                "loremipsumdolorsitametconsecteturadipiscingelitduisvolutpatvelitsitametmaximusscelerisquemorbiullamcorperexacconsequategestas").toString();
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testAboveLength() {
-        new NamespacedKey("loremipsumdolorsitametconsecteturadipiscingelitduisvolutpatvelitsitametmaximusscelerisquemorbiullamcorperexacconsequategestas",
-                "loremipsumdolorsitametconsecteturadipiscingelitduisvolutpatvelitsitametmaximusscelerisquemorbiullamcorperexacconsequategestas/"
-                + "loremipsumdolorsitametconsecteturadipiscingelitduisvolutpatvelitsitametmaximusscelerisquemorbiullamcorperexacconsequategestas").toString();
-    }
-}
diff --git a/src/test/java/org/bukkit/NoteTest.java b/src/test/java/org/bukkit/NoteTest.java
deleted file mode 100644
index 3711db09..00000000
--- a/src/test/java/org/bukkit/NoteTest.java
+++ /dev/null
@@ -1,147 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.Lists;
-import java.util.Collection;
-import org.junit.Test;
-
-public class NoteTest {
-    @Test
-    public void getToneByData() {
-        for (Note.Tone tone : Note.Tone.values()) {
-            assertThat(Note.Tone.getById(tone.getId()), is(tone));
-        }
-    }
-
-    @Test
-    public void verifySharpedData() {
-        for (Note.Tone tone : Note.Tone.values()) {
-            if (!tone.isSharpable()) return;
-
-            assertFalse(tone.isSharped(tone.getId(false)));
-            assertTrue(tone.isSharped(tone.getId(true)));
-        }
-    }
-
-    @Test
-    public void verifyUnknownToneData() {
-        Collection<Byte> tones = Lists.newArrayList();
-        for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) {
-            tones.add((byte) i);
-        }
-
-        for (Note.Tone tone : Note.Tone.values()) {
-            if (tone.isSharpable()) tones.remove(tone.getId(true));
-            tones.remove(tone.getId());
-        }
-
-        for (Byte data : tones) {
-            assertThat(Note.Tone.getById(data), is(nullValue()));
-
-            for (Note.Tone tone : Note.Tone.values()) {
-                try {
-                    tone.isSharped(data);
-
-                    fail(data + " should throw IllegalArgumentException");
-                } catch (IllegalArgumentException e) {
-                    assertNotNull(e);
-                }
-            }
-        }
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void createNoteBelowMin() {
-        new Note((byte) -1);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void createNoteAboveMax() {
-        new Note((byte) 25);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void createNoteOctaveBelowMax() {
-        new Note((byte) -1, Note.Tone.A, true);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void createNoteOctaveAboveMax() {
-        new Note((byte) 3, Note.Tone.A, true);
-    }
-
-    @Test
-    public void createNoteOctaveNonSharpable() {
-        Note note = new Note((byte) 0, Note.Tone.B, true);
-        assertFalse(note.isSharped());
-        assertThat(note.getTone(), is(Note.Tone.C));
-    }
-
-    @Test
-    public void createNoteFlat() {
-        Note note = Note.flat(0, Note.Tone.D);
-        assertTrue(note.isSharped());
-        assertThat(note.getTone(), is(Note.Tone.C));
-    }
-
-    @Test
-    public void createNoteFlatNonFlattenable() {
-        Note note = Note.flat(0, Note.Tone.C);
-        assertFalse(note.isSharped());
-        assertThat(note.getTone(), is(Note.Tone.B));
-    }
-
-    @Test
-    public void testFlatWrapping() {
-        Note note = Note.flat(1, Note.Tone.G);
-        assertTrue(note.isSharped());
-        assertThat(note.getTone(), is(Note.Tone.F));
-    }
-
-    @Test
-    public void testFlatWrapping2() {
-        Note note = new Note(1, Note.Tone.G, false).flattened();
-        assertTrue(note.isSharped());
-        assertThat(note.getTone(), is(Note.Tone.F));
-    }
-
-    @Test
-    public void testSharpWrapping() {
-        Note note = new Note(1, Note.Tone.F, false).sharped();
-        assertTrue(note.isSharped());
-        assertThat(note.getTone(), is(Note.Tone.F));
-        assertEquals(note.getOctave(), 2);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void testSharpWrapping2() {
-        new Note(2, Note.Tone.F, true).sharped();
-    }
-
-    @Test
-    public void testHighest() {
-        Note note = new Note(2, Note.Tone.F, true);
-        assertEquals(note.getId(), (byte)24);
-    }
-
-    @Test
-    public void testLowest() {
-        Note note = new Note(0, Note.Tone.F, true);
-        assertEquals(note.getId(), (byte)0);
-    }
-
-    @Test
-    public void doo() {
-        for (int i = 1; i <= 24; i++) {
-            Note note = new Note((byte) i);
-            int octave = note.getOctave();
-            Note.Tone tone = note.getTone();
-            boolean sharped = note.isSharped();
-
-            Note newNote = new Note(octave, tone, sharped);
-            assertThat(newNote, is(note));
-            assertThat(newNote.getId(), is(note.getId()));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/TestServer.java b/src/test/java/org/bukkit/TestServer.java
deleted file mode 100644
index 5f9d3482..00000000
--- a/src/test/java/org/bukkit/TestServer.java
+++ /dev/null
@@ -1,115 +0,0 @@
-package org.bukkit;
-
-import com.google.common.collect.ImmutableMap;
-import java.lang.reflect.InvocationHandler;
-import java.lang.reflect.Method;
-import java.lang.reflect.Proxy;
-import java.util.Map;
-import java.util.logging.Logger;
-import org.bukkit.command.SimpleCommandMap;
-import org.bukkit.plugin.PluginManager;
-import org.bukkit.plugin.SimplePluginManager;
-
-public final class TestServer implements InvocationHandler {
-    private static interface MethodHandler {
-        Object handle(TestServer server, Object[] args);
-    }
-
-    private static final Map<Method, MethodHandler> methods;
-
-    static {
-        try {
-            ImmutableMap.Builder<Method, MethodHandler> methodMap = ImmutableMap.builder();
-            methodMap.put(
-                    Server.class.getMethod("isPrimaryThread"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(TestServer server, Object[] args) {
-                            return Thread.currentThread().equals(server.creatingThread);
-                        }
-                    }
-                );
-            // Paper start
-            methodMap.put(
-                Server.class.getMethod("getTag", String.class, NamespacedKey.class, Class.class),
-                new MethodHandler() {
-                    public Object handle(TestServer server, Object[] args) {
-                        return new com.destroystokyo.paper.MaterialSetTag();
-                    }
-                }
-            );
-            // Paper end
-            methodMap.put(
-                    Server.class.getMethod("getPluginManager"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(TestServer server, Object[] args) {
-                            return server.pluginManager;
-                        }
-                    }
-                );
-            methodMap.put(
-                    Server.class.getMethod("getLogger"),
-                    new MethodHandler() {
-                        final Logger logger = Logger.getLogger(TestServer.class.getCanonicalName());
-                        @Override
-                        public Object handle(TestServer server, Object[] args) {
-                            return logger;
-                        }
-                    }
-                );
-            methodMap.put(
-                    Server.class.getMethod("getName"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(TestServer server, Object[] args) {
-                            return TestServer.class.getSimpleName();
-                        }
-                    }
-                );
-            methodMap.put(
-                    Server.class.getMethod("getVersion"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(TestServer server, Object[] args) {
-                            return "Version_" + TestServer.class.getPackage().getImplementationVersion();
-                        }
-                    }
-                );
-            methodMap.put(
-                    Server.class.getMethod("getBukkitVersion"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(TestServer server, Object[] args) {
-                            return "BukkitVersion_" + TestServer.class.getPackage().getImplementationVersion();
-                        }
-                    }
-                );
-            methods = methodMap.build();
-
-            TestServer server = new TestServer();
-            Server instance = Proxy.getProxyClass(Server.class.getClassLoader(), Server.class).asSubclass(Server.class).getConstructor(InvocationHandler.class).newInstance(server);
-            Bukkit.setServer(instance);
-            server.pluginManager = new SimplePluginManager(instance, new SimpleCommandMap(instance));
-        } catch (Throwable t) {
-            throw new Error(t);
-        }
-    }
-
-    private Thread creatingThread = Thread.currentThread();
-    private PluginManager pluginManager;
-    private TestServer() {};
-
-    public static Server getInstance() {
-        return Bukkit.getServer();
-    }
-
-    @Override
-    public Object invoke(Object proxy, Method method, Object[] args) {
-        MethodHandler handler = methods.get(method);
-        if (handler != null) {
-            return handler.handle(this, args);
-        }
-        throw new UnsupportedOperationException(String.valueOf(method));
-    }
-}
diff --git a/src/test/java/org/bukkit/TestWorld.java b/src/test/java/org/bukkit/TestWorld.java
deleted file mode 100644
index beb15c7c..00000000
--- a/src/test/java/org/bukkit/TestWorld.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package org.bukkit;
-
-import com.google.common.collect.ImmutableMap;
-import java.lang.reflect.InvocationHandler;
-import java.lang.reflect.Method;
-import java.lang.reflect.Proxy;
-import java.util.Map;
-
-public final class TestWorld implements InvocationHandler {
-
-    private static interface MethodHandler {
-
-        Object handle(TestWorld server, Object[] args);
-    }
-
-    private static final Map<Method, MethodHandler> methods;
-    public static final World INSTANCE;
-
-    static {
-        try {
-            ImmutableMap.Builder<Method, MethodHandler> methodMap = ImmutableMap.builder();
-            methodMap.put(
-                    Object.class.getMethod("equals", Object.class),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(TestWorld server, Object[] args) {
-                            return this == args[0];
-                        }
-                    }
-                );
-            methodMap.put(
-                    Object.class.getMethod("hashCode"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(TestWorld server, Object[] args) {
-                            return this.hashCode();
-                        }
-                    }
-                );
-            methods = methodMap.build();
-
-            TestWorld world = new TestWorld();
-            INSTANCE = Proxy.getProxyClass(World.class.getClassLoader(), World.class).asSubclass(World.class).getConstructor(InvocationHandler.class).newInstance(world);
-        } catch (Throwable t) {
-            throw new Error(t);
-        }
-    }
-
-    private TestWorld() {
-    }
-
-    public static Server getInstance() {
-        return Bukkit.getServer();
-    }
-
-    @Override
-    public Object invoke(Object proxy, Method method, Object[] args) {
-        MethodHandler handler = methods.get(method);
-        if (handler != null) {
-            return handler.handle(this, args);
-        }
-        throw new UnsupportedOperationException(String.valueOf(method));
-    }
-}
diff --git a/src/test/java/org/bukkit/TreeSpeciesTest.java b/src/test/java/org/bukkit/TreeSpeciesTest.java
deleted file mode 100644
index 51e956cc..00000000
--- a/src/test/java/org/bukkit/TreeSpeciesTest.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class TreeSpeciesTest {
-    @Test
-    public void getByData() {
-        for (TreeSpecies treeSpecies : TreeSpecies.values()) {
-            assertThat(TreeSpecies.getByData(treeSpecies.getData()), is(treeSpecies));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/WorldTypeTest.java b/src/test/java/org/bukkit/WorldTypeTest.java
deleted file mode 100644
index 3c5f7b8a..00000000
--- a/src/test/java/org/bukkit/WorldTypeTest.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package org.bukkit;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class WorldTypeTest {
-    @Test
-    public void getByName() {
-        for (WorldType worldType : WorldType.values()) {
-            assertThat(WorldType.getByName(worldType.getName()), is(worldType));
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java b/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
deleted file mode 100644
index aab5c89f..00000000
--- a/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
+++ /dev/null
@@ -1,600 +0,0 @@
-package org.bukkit.configuration;
-
-import static org.junit.Assert.*;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.util.Vector;
-import org.junit.Test;
-
-public abstract class ConfigurationSectionTest {
-    public abstract ConfigurationSection getConfigurationSection();
-
-    @Test
-    public void testGetKeys() {
-        ConfigurationSection section = getConfigurationSection();
-
-        section.set("key", true);
-        section.set("subsection.subkey", true);
-        section.set("subsection.subkey2", true);
-        section.set("subsection.subsubsection.key", true);
-        section.set("key2", true);
-        section.set("42", true);
-
-        assertArrayEquals(new String[] { "key", "subsection", "key2", "42" }, section.getKeys(false).toArray());
-        assertArrayEquals(new String[] { "key", "subsection", "subsection.subkey", "subsection.subkey2", "subsection.subsubsection", "subsection.subsubsection.key", "key2", "42" }, section.getKeys(true).toArray());
-        assertArrayEquals(new String[] { "subkey", "subkey2", "subsubsection", "subsubsection.key" }, section.getConfigurationSection("subsection").getKeys(true).toArray());
-    }
-
-    @Test
-    public void testGetKeysWithDefaults() {
-        ConfigurationSection section = getConfigurationSection();
-        section.getRoot().options().copyDefaults(true);
-
-        section.set("key", true);
-        section.addDefault("subsection.subkey", true);
-        section.addDefault("subsection.subkey2", true);
-        section.addDefault("subsection.subsubsection.key", true);
-        section.addDefault("key2", true);
-
-        assertArrayEquals(new String[] { "subsection", "key2", "key" }, section.getKeys(false).toArray());
-        assertArrayEquals(new String[] { "subsection", "subsection.subkey", "subsection.subkey2", "subsection.subsubsection", "subsection.subsubsection.key", "key2", "key" }, section.getKeys(true).toArray());
-        assertArrayEquals(new String[] { "subkey", "subkey2", "subsubsection", "subsubsection.key" }, section.getConfigurationSection("subsection").getKeys(true).toArray());
-    }
-
-    @Test
-    public void testGetValues() {
-        ConfigurationSection section = getConfigurationSection();
-
-        section.set("bool", true);
-        section.set("subsection.string", "test");
-        section.set("subsection.long", Long.MAX_VALUE);
-        section.set("int", 42);
-
-        Map<String, Object> shallowValues = section.getValues(false);
-        assertArrayEquals(new String[] { "bool", "subsection", "int" }, shallowValues.keySet().toArray());
-        assertArrayEquals(new Object[] { true, section.getConfigurationSection("subsection"), 42 }, shallowValues.values().toArray());
-
-        Map<String, Object> deepValues = section.getValues(true);
-        assertArrayEquals(new String[] { "bool", "subsection", "subsection.string", "subsection.long", "int" }, deepValues.keySet().toArray());
-        assertArrayEquals(new Object[] { true, section.getConfigurationSection("subsection"), "test", Long.MAX_VALUE, 42 }, deepValues.values().toArray());
-    }
-
-    @Test
-    public void testGetValuesWithDefaults() {
-        ConfigurationSection section = getConfigurationSection();
-        section.getRoot().options().copyDefaults(true);
-
-        // Fix for SPIGOT-4558 means that defaults will always be first
-        // This is a little bit unintuitive for section defaults when deep iterating keys / values as shown below
-        // But the API doesn't guarantee order & when serialized (using shallow getters) all is well
-        section.set("bool", true);
-        section.set("subsection.string", "test");
-        section.addDefault("subsection.long", Long.MAX_VALUE);
-        section.addDefault("int", 42);
-
-        Map<String, Object> shallowValues = section.getValues(false);
-        assertArrayEquals(new String[] { "int", "bool", "subsection" }, shallowValues.keySet().toArray());
-        assertArrayEquals(new Object[] { 42, true, section.getConfigurationSection("subsection") }, shallowValues.values().toArray());
-
-        Map<String, Object> deepValues = section.getValues(true);
-        assertArrayEquals(new String[] { "subsection.long", "int", "bool", "subsection",  "subsection.string" }, deepValues.keySet().toArray());
-        assertArrayEquals(new Object[] { Long.MAX_VALUE, 42, true, section.getConfigurationSection("subsection"), "test" }, deepValues.values().toArray());
-    }
-
-    @Test
-    public void testContains() {
-        ConfigurationSection section = getConfigurationSection();
-
-        section.set("exists", true);
-
-        assertTrue(section.contains("exists"));
-        assertFalse(section.contains("doesnt-exist"));
-
-        assertTrue(section.contains("exists", true));
-        assertTrue(section.contains("exists", false));
-
-        assertFalse(section.contains("doesnt-exist", true));
-        assertFalse(section.contains("doesnt-exist", false));
-
-        section.addDefault("doenst-exist-two", true);
-        section.set("doenst-exist-two", null);
-
-        assertFalse(section.contains("doenst-exist-two", true));
-        assertTrue(section.contains("doenst-exist-two", false));
-    }
-
-    @Test
-    public void testIsSet() {
-        ConfigurationSection section = getConfigurationSection();
-
-        section.set("notDefault", true);
-        section.getRoot().addDefault("default", true);
-        section.getRoot().addDefault("defaultAndSet", true);
-        section.set("defaultAndSet", true);
-
-        assertTrue(section.isSet("notDefault"));
-        assertFalse(section.isSet("default"));
-        assertTrue(section.isSet("defaultAndSet"));
-    }
-
-    @Test
-    public void testGetCurrentPath() {
-        ConfigurationSection section = getConfigurationSection();
-
-        assertEquals(section.getName(), section.getCurrentPath());
-    }
-
-    @Test
-    public void testGetName() {
-        ConfigurationSection section = getConfigurationSection().createSection("subsection");
-
-        assertEquals("subsection", section.getName());
-        assertEquals("", section.getRoot().getName());
-    }
-
-    @Test
-    public void testGetRoot() {
-        ConfigurationSection section = getConfigurationSection();
-
-        assertNotNull(section.getRoot());
-        assertTrue(section.getRoot().contains(section.getCurrentPath()));
-    }
-
-    @Test
-    public void testGetParent() {
-        ConfigurationSection section = getConfigurationSection();
-        ConfigurationSection subsection = section.createSection("subsection");
-
-        assertEquals(section.getRoot(), section.getParent());
-        assertEquals(section, subsection.getParent());
-    }
-
-    @Test
-    public void testGet_String() {
-        ConfigurationSection section = getConfigurationSection();
-
-        section.set("exists", "hello world");
-
-        assertEquals("hello world", section.getString("exists"));
-        assertNull(section.getString("doesntExist"));
-    }
-
-    @Test
-    public void testGet_String_Object() {
-        ConfigurationSection section = getConfigurationSection();
-
-        section.set("exists", "Set Value");
-
-        assertEquals("Set Value", section.get("exists", "Default Value"));
-        assertEquals("Default Value", section.get("doesntExist", "Default Value"));
-    }
-
-    @Test
-    public void testSet() {
-        ConfigurationSection section = getConfigurationSection();
-
-        section.set("exists", "hello world");
-
-        assertTrue(section.contains("exists"));
-        assertTrue(section.isSet("exists"));
-        assertEquals("hello world", section.get("exists"));
-
-        section.set("exists", null);
-
-        assertFalse(section.contains("exists"));
-        assertFalse(section.isSet("exists"));
-    }
-
-    @Test
-    public void testCreateSection() {
-        ConfigurationSection section = getConfigurationSection();
-        ConfigurationSection subsection = section.createSection("subsection");
-
-        assertEquals("subsection", subsection.getName());
-    }
-
-    @Test
-    public void testSectionMap() {
-        ConfigurationSection config = getConfigurationSection();
-        Map<String, Object> testMap = new LinkedHashMap<String, Object>();
-
-        testMap.put("string", "Hello World");
-        testMap.put("integer", 15);
-
-        config.createSection("test.path", testMap);
-
-        assertEquals(testMap, config.getConfigurationSection("test.path").getValues(false));
-    }
-
-    @Test
-    public void testGetString_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        String value = "Hello World";
-
-        section.set(key, value);
-
-        assertEquals(value, section.getString(key));
-        assertNull(section.getString("doesntExist"));
-    }
-
-    @Test
-    public void testGetString_String_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        String value = "Hello World";
-        String def = "Default Value";
-
-        section.set(key, value);
-
-        assertEquals(value, section.getString(key, def));
-        assertEquals(def, section.getString("doesntExist", def));
-    }
-
-    @Test
-    public void testIsString() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        String value = "Hello World";
-
-        section.set(key, value);
-
-        assertTrue(section.isString(key));
-        assertFalse(section.isString("doesntExist"));
-    }
-
-    @Test
-    public void testGetInt_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        int value = Integer.MAX_VALUE;
-
-        section.set(key, value);
-
-        assertEquals(value, section.getInt(key));
-        assertNull(section.getString("doesntExist"));
-    }
-
-    @Test
-    public void testGetInt_String_Int() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        int value = Integer.MAX_VALUE;
-        int def = Integer.MIN_VALUE;
-
-        section.set(key, value);
-
-        assertEquals(value, section.getInt(key, def));
-        assertEquals(def, section.getInt("doesntExist", def));
-    }
-
-    @Test
-    public void testIsInt() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        int value = Integer.MAX_VALUE;
-
-        section.set(key, value);
-
-        assertTrue(section.isInt(key));
-        assertFalse(section.isInt("doesntExist"));
-    }
-
-    @Test
-    public void testGetBoolean_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        boolean value = true;
-
-        section.set(key, value);
-
-        assertEquals(value, section.getBoolean(key));
-        assertNull(section.getString("doesntExist"));
-    }
-
-    @Test
-    public void testGetBoolean_String_Boolean() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        boolean value = true;
-        boolean def = false;
-
-        section.set(key, value);
-
-        assertEquals(value, section.getBoolean(key, def));
-        assertEquals(def, section.getBoolean("doesntExist", def));
-    }
-
-    @Test
-    public void testIsBoolean() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        boolean value = true;
-
-        section.set(key, value);
-
-        assertTrue(section.isBoolean(key));
-        assertFalse(section.isBoolean("doesntExist"));
-    }
-
-    @Test
-    public void testGetDouble_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        double value = Double.MAX_VALUE;
-
-        section.set(key, value);
-
-        assertEquals(value, section.getDouble(key), 1);
-        assertNull(section.getString("doesntExist"));
-    }
-
-    @Test
-    public void testGetDoubleFromInt() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        double value = 123;
-
-        section.set(key, (int) value);
-
-        assertEquals(value, section.getDouble(key), 1);
-        assertNull(section.getString("doesntExist"));
-    }
-
-    @Test
-    public void testGetDouble_String_Double() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        double value = Double.MAX_VALUE;
-        double def = Double.MIN_VALUE;
-
-        section.set(key, value);
-
-        assertEquals(value, section.getDouble(key, def), 1);
-        assertEquals(def, section.getDouble("doesntExist", def), 1);
-    }
-
-    @Test
-    public void testIsDouble() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        double value = Double.MAX_VALUE;
-
-        section.set(key, value);
-
-        assertTrue(section.isDouble(key));
-        assertFalse(section.isDouble("doesntExist"));
-    }
-
-    @Test
-    public void testGetLong_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        long value = Long.MAX_VALUE;
-
-        section.set(key, value);
-
-        assertEquals(value, section.getLong(key));
-        assertNull(section.getString("doesntExist"));
-    }
-
-    @Test
-    public void testGetLong_String_Long() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        long value = Long.MAX_VALUE;
-        long def = Long.MIN_VALUE;
-
-        section.set(key, value);
-
-        assertEquals(value, section.getLong(key, def));
-        assertEquals(def, section.getLong("doesntExist", def));
-    }
-
-    @Test
-    public void testIsLong() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        long value = Long.MAX_VALUE;
-
-        section.set(key, value);
-
-        assertTrue(section.isLong(key));
-        assertFalse(section.isLong("doesntExist"));
-    }
-
-    @Test
-    public void testGetList_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        Map<String, Object> map = new HashMap<String, Object>();
-
-        map.put("one", 1);
-        map.put("two", "two");
-        map.put("three", 3.14);
-
-        List<Object> value = Arrays.asList("One", "Two", "Three", 4, "5", 6.0, true, "false", map);
-
-        section.set(key, value);
-
-        assertEquals(value, section.getList(key));
-        assertEquals(Arrays.asList((Object) "One", "Two", "Three", "4", "5", "6.0", "true", "false"), section.getStringList(key));
-        assertEquals(Arrays.asList((Object) 4, 5, 6), section.getIntegerList(key));
-        assertEquals(Arrays.asList((Object) true, false), section.getBooleanList(key));
-        assertEquals(Arrays.asList((Object) 4.0, 5.0, 6.0), section.getDoubleList(key));
-        assertEquals(Arrays.asList((Object) 4.0f, 5.0f, 6.0f), section.getFloatList(key));
-        assertEquals(Arrays.asList((Object) 4L, 5L, 6L), section.getLongList(key));
-        assertEquals(Arrays.asList((Object) (byte) 4, (byte) 5, (byte) 6), section.getByteList(key));
-        assertEquals(Arrays.asList((Object) (short) 4, (short) 5, (short) 6), section.getShortList(key));
-        assertEquals(map, section.getMapList(key).get(0));
-        assertNull(section.getString("doesntExist"));
-    }
-
-    @Test
-    public void testGetList_String_List() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        List<String> value = Arrays.asList("One", "Two", "Three");
-        List<String> def = Arrays.asList("A", "B", "C");
-
-        section.set(key, value);
-
-        assertEquals(value, section.getList(key, def));
-        assertEquals(def, section.getList("doesntExist", def));
-    }
-
-    @Test
-    public void testIsList() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        List<String> value = Arrays.asList("One", "Two", "Three");
-
-        section.set(key, value);
-
-        assertTrue(section.isList(key));
-        assertFalse(section.isList("doesntExist"));
-    }
-
-    @Test
-    public void testGetObject_String_Class() {
-        ConfigurationSection section = getConfigurationSection();
-
-        section.set("set", Integer.valueOf(1));
-        section.addDefault("default", Integer.valueOf(2));
-        section.addDefault("defaultAndSet", Boolean.TRUE);
-        section.set("defaultAndSet", Integer.valueOf(3));
-
-        assertEquals(Integer.valueOf(1), section.getObject("set", Integer.class));
-        assertNull(section.getObject("set", Boolean.class));
-        assertEquals(Integer.valueOf(2), section.getObject("default", Number.class));
-        assertNull(section.getObject("default", Boolean.class));
-        assertEquals(Integer.valueOf(3), section.getObject("defaultAndSet", Integer.class));
-        assertEquals(Boolean.TRUE, section.getObject("defaultAndSet", Boolean.class));
-        assertEquals(Integer.valueOf(3), section.getObject("defaultAndSet", Object.class));
-        assertNull(section.getObject("defaultAndSet", String.class));
-        assertNull(section.getObject("doesntExist", Boolean.class));
-        assertNull(section.getString("doesntExist"));
-    }
-
-    @Test
-    public void testGetObject_String_Class_T() {
-        ConfigurationSection section = getConfigurationSection();
-
-        section.set("set", Integer.valueOf(1));
-        section.addDefault("default", Integer.valueOf(2));
-
-        assertEquals(Integer.valueOf(1), section.getObject("set", Integer.class, null));
-        assertEquals(Integer.valueOf(1), section.getObject("set", Integer.class, Integer.valueOf(4)));
-        assertNull(section.getObject("set", Boolean.class, null));
-        assertNull(section.getObject("default", Integer.class, null));
-        assertNull(section.getObject("doesntExist", Boolean.class, null));
-        assertEquals(Boolean.TRUE, section.getObject("doesntExist", Boolean.class, Boolean.TRUE));
-        assertNull(section.getString("doesntExist"));
-    }
-
-    @Test
-    public void testGetVector_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        Vector value = new Vector(Double.MIN_VALUE, Double.MAX_VALUE, 5);
-
-        section.set(key, value);
-
-        assertEquals(value, section.getVector(key));
-        assertNull(section.getString("doesntExist"));
-    }
-
-    @Test
-    public void testGetVector_String_Vector() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        Vector value = new Vector(Double.MIN_VALUE, Double.MAX_VALUE, 5);
-        Vector def = new Vector(100, Double.MIN_VALUE, Double.MAX_VALUE);
-
-        section.set(key, value);
-
-        assertEquals(value, section.getVector(key, def));
-        assertEquals(def, section.getVector("doesntExist", def));
-    }
-
-    @Test
-    public void testIsVector() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        Vector value = new Vector(Double.MIN_VALUE, Double.MAX_VALUE, 5);
-
-        section.set(key, value);
-
-        assertTrue(section.isVector(key));
-        assertFalse(section.isVector("doesntExist"));
-    }
-
-    @Test
-    public void testGetItemStack_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
-
-        section.set(key, value);
-
-        assertEquals(value, section.getItemStack(key));
-        assertNull(section.getString("doesntExist"));
-    }
-
-    @Test
-    public void testGetItemStack_String_ItemStack() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
-        ItemStack def = new ItemStack(Material.STONE, 1);
-
-        section.set(key, value);
-
-        assertEquals(value, section.getItemStack(key, def));
-        assertEquals(def, section.getItemStack("doesntExist", def));
-    }
-
-    @Test
-    public void testIsItemStack() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
-
-        section.set(key, value);
-
-        assertTrue(section.isItemStack(key));
-        assertFalse(section.isItemStack("doesntExist"));
-    }
-
-    @Test
-    public void testGetConfigurationSection() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-
-        ConfigurationSection subsection = section.createSection(key);
-
-        assertEquals(subsection, section.getConfigurationSection(key));
-    }
-
-    @Test
-    public void testIsConfigurationSection() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-
-        section.createSection(key);
-
-        assertTrue(section.isConfigurationSection(key));
-        assertFalse(section.isConfigurationSection("doesntExist"));
-    }
-
-    public enum TestEnum {
-        HELLO,
-        WORLD,
-        BANANAS
-    }
-}
diff --git a/src/test/java/org/bukkit/configuration/ConfigurationTest.java b/src/test/java/org/bukkit/configuration/ConfigurationTest.java
deleted file mode 100644
index 94eb854e..00000000
--- a/src/test/java/org/bukkit/configuration/ConfigurationTest.java
+++ /dev/null
@@ -1,156 +0,0 @@
-package org.bukkit.configuration;
-
-import static org.junit.Assert.*;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Set;
-import org.bukkit.util.Vector;
-import org.junit.Test;
-
-public abstract class ConfigurationTest {
-    public abstract Configuration getConfig();
-
-    public Map<String, Object> getTestValues() {
-        HashMap<String, Object> result = new LinkedHashMap<String, Object>();
-
-        result.put("integer", Integer.MIN_VALUE);
-        result.put("string", "String Value");
-        result.put("long", Long.MAX_VALUE);
-        result.put("true-boolean", true);
-        result.put("false-boolean", false);
-        result.put("vector", new Vector(12345.67, 64, -12345.6789));
-        result.put("list", Arrays.asList(1, 2, 3, 4, 5));
-        result.put("42", "The Answer");
-
-        return result;
-    }
-
-    /**
-     * Test of addDefault method, of class Configuration.
-     */
-    @Test
-    public void testAddDefault() {
-        Configuration config = getConfig();
-        Map<String, Object> values = getTestValues();
-
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            String path = entry.getKey();
-            Object object = entry.getValue();
-
-            config.addDefault(path, object);
-
-            assertEquals(object, config.get(path));
-            assertTrue(config.contains(path));
-            assertFalse(config.isSet(path));
-            assertTrue(config.getDefaults().isSet(path));
-        }
-    }
-
-    /**
-     * Test of addDefaults method, of class Configuration.
-     */
-    @Test
-    public void testAddDefaults_Map() {
-        Configuration config = getConfig();
-        Map<String, Object> values = getTestValues();
-
-        config.addDefaults(values);
-
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            String path = entry.getKey();
-            Object object = entry.getValue();
-
-            assertEquals(object, config.get(path));
-            assertTrue(config.contains(path));
-            assertFalse(config.isSet(path));
-            assertTrue(config.getDefaults().isSet(path));
-        }
-    }
-
-    /**
-     * Test of addDefaults method, of class Configuration.
-     */
-    @Test
-    public void testAddDefaults_Configuration() {
-        Configuration config = getConfig();
-        Map<String, Object> values = getTestValues();
-        Configuration defaults = getConfig();
-
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            defaults.set(entry.getKey(), entry.getValue());
-        }
-
-        config.addDefaults(defaults);
-
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            String path = entry.getKey();
-            Object object = entry.getValue();
-
-            assertEquals(object, config.get(path));
-            assertTrue(config.contains(path));
-            assertFalse(config.isSet(path));
-            assertTrue(config.getDefaults().isSet(path));
-        }
-    }
-
-    /**
-     * Test of setDefaults method, of class Configuration.
-     */
-    @Test
-    public void testSetDefaults() {
-        Configuration config = getConfig();
-        Map<String, Object> values = getTestValues();
-        Configuration defaults = getConfig();
-
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            defaults.set(entry.getKey(), entry.getValue());
-        }
-
-        config.setDefaults(defaults);
-
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            String path = entry.getKey();
-            Object object = entry.getValue();
-
-            assertEquals(object, config.get(path));
-            assertTrue(config.contains(path));
-            assertFalse(config.isSet(path));
-            assertTrue(config.getDefaults().isSet(path));
-        }
-    }
-
-    /**
-     * Test creation of ConfigurationSection
-     */
-    @Test
-    public void testCreateSection() {
-        Configuration config = getConfig();
-
-        Set<String> set = new HashSet<String>();
-        set.add("this");
-        set.add("this.test.sub");
-        set.add("this.test");
-        set.add("this.test.other");
-
-        config.createSection("this.test.sub");
-        config.createSection("this.test.other");
-
-        assertEquals(set, config.getKeys(true));
-    }
-
-    /**
-     * Test of getDefaults method, of class Configuration.
-     */
-    @Test
-    public void testGetDefaults() {
-        Configuration config = getConfig();
-        Configuration defaults = getConfig();
-
-        config.setDefaults(defaults);
-
-        assertEquals(defaults, config.getDefaults());
-    }
-}
diff --git a/src/test/java/org/bukkit/configuration/MemoryConfigurationTest.java b/src/test/java/org/bukkit/configuration/MemoryConfigurationTest.java
deleted file mode 100644
index 3de0ce92..00000000
--- a/src/test/java/org/bukkit/configuration/MemoryConfigurationTest.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package org.bukkit.configuration;
-
-public class MemoryConfigurationTest extends ConfigurationTest {
-    @Override
-    public Configuration getConfig() {
-        return new MemoryConfiguration();
-    }
-}
diff --git a/src/test/java/org/bukkit/configuration/MemorySectionTest.java b/src/test/java/org/bukkit/configuration/MemorySectionTest.java
deleted file mode 100644
index be7768ab..00000000
--- a/src/test/java/org/bukkit/configuration/MemorySectionTest.java
+++ /dev/null
@@ -1,8 +0,0 @@
-package org.bukkit.configuration;
-
-public class MemorySectionTest extends ConfigurationSectionTest {
-    @Override
-    public ConfigurationSection getConfigurationSection() {
-        return new MemoryConfiguration().createSection("section");
-    }
-}
diff --git a/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java b/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
deleted file mode 100644
index a996753b..00000000
--- a/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
+++ /dev/null
@@ -1,209 +0,0 @@
-package org.bukkit.configuration.file;
-
-import static org.junit.Assert.*;
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileWriter;
-import java.util.Map;
-import org.bukkit.configuration.MemoryConfigurationTest;
-import org.junit.Rule;
-import org.junit.Test;
-import org.junit.rules.TemporaryFolder;
-
-public abstract class FileConfigurationTest extends MemoryConfigurationTest {
-    @Rule
-    public TemporaryFolder testFolder = new TemporaryFolder();
-
-    @Override
-    public abstract FileConfiguration getConfig();
-
-    public abstract String getTestValuesString();
-
-    public abstract String getTestHeaderInput();
-
-    public abstract String getTestHeaderResult();
-
-    @Test
-    public void testSave_File() throws Exception {
-        FileConfiguration config = getConfig();
-        File file = testFolder.newFile("test.config");
-
-        for (Map.Entry<String, Object> entry : getTestValues().entrySet()) {
-            config.set(entry.getKey(), entry.getValue());
-        }
-
-        config.save(file);
-
-        assertTrue(file.isFile());
-    }
-
-    @Test
-    public void testSave_String() throws Exception {
-        FileConfiguration config = getConfig();
-        File file = testFolder.newFile("test.config");
-
-        for (Map.Entry<String, Object> entry : getTestValues().entrySet()) {
-            config.set(entry.getKey(), entry.getValue());
-        }
-
-        config.save(file.getAbsolutePath());
-
-        assertTrue(file.isFile());
-    }
-
-    @Test
-    public void testSaveToString() {
-        FileConfiguration config = getConfig();
-
-        for (Map.Entry<String, Object> entry : getTestValues().entrySet()) {
-            config.set(entry.getKey(), entry.getValue());
-        }
-
-        String result = config.saveToString();
-        String expected = getTestValuesString();
-
-        assertEquals(expected, result);
-    }
-
-    @Test
-    public void testLoad_File() throws Exception {
-        FileConfiguration config = getConfig();
-        File file = testFolder.newFile("test.config");
-        BufferedWriter writer = new BufferedWriter(new FileWriter(file));
-        String saved = getTestValuesString();
-        Map<String, Object> values = getTestValues();
-
-        try {
-            writer.write(saved);
-        } finally {
-            writer.close();
-        }
-
-        config.load(file);
-
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            assertEquals(entry.getValue(), config.get(entry.getKey()));
-        }
-
-        assertEquals(values.keySet(), config.getKeys(true));
-    }
-
-    @Test
-    public void testLoad_String() throws Exception {
-        FileConfiguration config = getConfig();
-        File file = testFolder.newFile("test.config");
-        BufferedWriter writer = new BufferedWriter(new FileWriter(file));
-        String saved = getTestValuesString();
-        Map<String, Object> values = getTestValues();
-
-        try {
-            writer.write(saved);
-        } finally {
-            writer.close();
-        }
-
-        config.load(file.getAbsolutePath());
-
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            assertEquals(entry.getValue(), config.get(entry.getKey()));
-        }
-
-        assertEquals(values.keySet(), config.getKeys(true));
-    }
-
-    @Test
-    public void testLoadFromString() throws Exception {
-        FileConfiguration config = getConfig();
-        Map<String, Object> values = getTestValues();
-        String saved = getTestValuesString();
-
-        config.loadFromString(saved);
-
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            assertEquals(entry.getValue(), config.get(entry.getKey()));
-        }
-
-        assertEquals(values.keySet(), config.getKeys(true));
-        assertEquals(saved, config.saveToString());
-    }
-
-    @Test
-    public void testSaveToStringWithHeader() {
-        FileConfiguration config = getConfig();
-        config.options().header(getTestHeaderInput());
-
-        for (Map.Entry<String, Object> entry : getTestValues().entrySet()) {
-            config.set(entry.getKey(), entry.getValue());
-        }
-
-        String result = config.saveToString();
-        String expected = getTestHeaderResult() + "\n" + getTestValuesString();
-
-        assertEquals(expected, result);
-    }
-
-    @Test
-    public void testParseHeader() throws Exception {
-        FileConfiguration config = getConfig();
-        Map<String, Object> values = getTestValues();
-        String saved = getTestValuesString();
-        String header = getTestHeaderResult();
-        String expected = getTestHeaderInput();
-
-        config.loadFromString(header + "\n" + saved);
-
-        assertEquals(expected, config.options().header());
-
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            assertEquals(entry.getValue(), config.get(entry.getKey()));
-        }
-
-        assertEquals(values.keySet(), config.getKeys(true));
-        assertEquals(header + "\n" + saved, config.saveToString());
-    }
-
-    @Test
-    public void testCopyHeader() throws Exception {
-        FileConfiguration config = getConfig();
-        FileConfiguration defaults = getConfig();
-        Map<String, Object> values = getTestValues();
-        String saved = getTestValuesString();
-        String header = getTestHeaderResult();
-        String expected = getTestHeaderInput();
-
-        defaults.loadFromString(header);
-        config.loadFromString(saved);
-        config.setDefaults(defaults);
-
-        assertNull(config.options().header());
-        assertEquals(expected, defaults.options().header());
-
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            assertEquals(entry.getValue(), config.get(entry.getKey()));
-        }
-
-        assertEquals(values.keySet(), config.getKeys(true));
-        assertEquals(header + "\n" + saved, config.saveToString());
-
-        config = getConfig();
-        config.loadFromString(getTestHeaderResult() + saved);
-        assertEquals(getTestHeaderResult() + saved, config.saveToString());
-    }
-
-    @Test
-    public void testReloadEmptyConfig() throws Exception {
-        FileConfiguration config = getConfig();
-
-        assertEquals("", config.saveToString());
-
-        config = getConfig();
-        config.loadFromString("");
-
-        assertEquals("", config.saveToString());
-
-        config = getConfig();
-        config.loadFromString("\n\n"); // Should trim the first newlines of a header
-
-        assertEquals("", config.saveToString());
-    }
-}
diff --git a/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java b/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
deleted file mode 100644
index 71ba36c0..00000000
--- a/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package org.bukkit.configuration.file;
-
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-public class YamlConfigurationTest extends FileConfigurationTest {
-
-    @Override
-    public YamlConfiguration getConfig() {
-        return new YamlConfiguration();
-    }
-
-    @Override
-    public String getTestHeaderInput() {
-        return "This is a sample\nheader.\n\nNewline above should be commented.\n\n";
-    }
-
-    @Override
-    public String getTestHeaderResult() {
-        return "# This is a sample\n# header.\n# \n# Newline above should be commented.\n\n";
-    }
-
-    @Override
-    public String getTestValuesString() {
-        return "integer: -2147483648\n" +
-            "string: String Value\n" +
-            "long: 9223372036854775807\n" +
-            "true-boolean: true\n" +
-            "false-boolean: false\n" +
-            "vector:\n" +
-            "  ==: Vector\n" +
-            "  x: 12345.67\n" +
-            "  y: 64.0\n" +
-            "  z: -12345.6789\n" +
-            "list:\n" +
-            "- 1\n" +
-            "- 2\n" +
-            "- 3\n" +
-            "- 4\n" +
-            "- 5\n" +
-            "'42': The Answer\n";
-    }
-
-    @Test
-    public void testSaveToStringWithIndent() {
-        YamlConfiguration config = getConfig();
-        config.options().indent(9);
-
-        config.set("section.key", 1);
-
-        String result = config.saveToString();
-        String expected = "section:\n         key: 1\n";
-
-        assertEquals(expected, result);
-    }
-}
diff --git a/src/test/java/org/bukkit/conversations/ConversationContextTest.java b/src/test/java/org/bukkit/conversations/ConversationContextTest.java
deleted file mode 100644
index 3780a47c..00000000
--- a/src/test/java/org/bukkit/conversations/ConversationContextTest.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package org.bukkit.conversations;
-
-import static org.junit.Assert.*;
-import java.util.HashMap;
-import java.util.Map;
-import org.junit.Test;
-
-/**
- */
-public class ConversationContextTest {
-    @Test
-    public void TestFromWhom() {
-        Conversable conversable = new FakeConversable();
-        ConversationContext context = new ConversationContext(null, conversable, new HashMap<Object, Object>());
-        assertEquals(conversable, context.getForWhom());
-    }
-
-    @Test
-    public void TestPlugin() {
-        Conversable conversable = new FakeConversable();
-        ConversationContext context = new ConversationContext(null, conversable, new HashMap<Object, Object>());
-        assertEquals(null, context.getPlugin());
-    }
-
-    @Test
-    public void TestSessionData() {
-        Conversable conversable = new FakeConversable();
-        Map session = new HashMap();
-        session.put("key", "value");
-        ConversationContext context = new ConversationContext(null, conversable, session);
-        assertEquals("value", context.getSessionData("key"));
-    }
-}
diff --git a/src/test/java/org/bukkit/conversations/ConversationTest.java b/src/test/java/org/bukkit/conversations/ConversationTest.java
deleted file mode 100644
index c448dc72..00000000
--- a/src/test/java/org/bukkit/conversations/ConversationTest.java
+++ /dev/null
@@ -1,119 +0,0 @@
-package org.bukkit.conversations;
-
-import static org.junit.Assert.*;
-import org.bukkit.plugin.TestPlugin;
-import org.junit.Test;
-
-/**
- */
-public class ConversationTest {
-
-    @Test
-    public void testBaseConversationFlow() {
-        FakeConversable forWhom = new FakeConversable();
-        Conversation conversation = new Conversation(null, forWhom, new FirstPrompt());
-
-        // Conversation not yet begun
-        assertNull(forWhom.lastSentMessage);
-        assertEquals(conversation.getForWhom(), forWhom);
-        assertTrue(conversation.isModal());
-
-        // Begin the conversation
-        conversation.begin();
-        assertEquals("FirstPrompt", forWhom.lastSentMessage);
-        assertEquals(conversation, forWhom.begunConversation);
-
-        // Send the first input
-        conversation.acceptInput("FirstInput");
-        assertEquals("SecondPrompt", forWhom.lastSentMessage);
-        assertEquals(conversation, forWhom.abandonedConverstion);
-    }
-
-    @Test
-    public void testConversationFactory() {
-        FakeConversable forWhom = new FakeConversable();
-        NullConversationPrefix prefix = new NullConversationPrefix();
-        ConversationFactory factory = new ConversationFactory(new TestPlugin("Test"))
-                .withFirstPrompt(new FirstPrompt())
-                .withModality(false)
-                .withPrefix(prefix);
-        Conversation conversation = factory.buildConversation(forWhom);
-
-        // Conversation not yet begun
-        assertNull(forWhom.lastSentMessage);
-        assertEquals(conversation.getForWhom(), forWhom);
-        assertFalse(conversation.isModal());
-        assertEquals(conversation.getPrefix(), prefix);
-
-        // Begin the conversation
-        conversation.begin();
-        assertEquals("FirstPrompt", forWhom.lastSentMessage);
-        assertEquals(conversation, forWhom.begunConversation);
-
-        // Send the first input
-        conversation.acceptInput("FirstInput");
-        assertEquals("SecondPrompt", forWhom.lastSentMessage);
-        assertEquals(conversation, forWhom.abandonedConverstion);
-    }
-
-    @Test
-    public void testEscapeSequence() {
-        FakeConversable forWhom = new FakeConversable();
-        Conversation conversation = new Conversation(null, forWhom, new FirstPrompt());
-        conversation.addConversationCanceller(new ExactMatchConversationCanceller("bananas"));
-
-        // Begin the conversation
-        conversation.begin();
-        assertEquals("FirstPrompt", forWhom.lastSentMessage);
-        assertEquals(conversation, forWhom.begunConversation);
-
-        // Send the first input
-        conversation.acceptInput("bananas");
-        assertEquals("bananas", forWhom.lastSentMessage);
-        assertEquals(conversation, forWhom.abandonedConverstion);
-    }
-
-    @Test
-    public void testNotPlayer() {
-        FakeConversable forWhom = new FakeConversable();
-        ConversationFactory factory = new ConversationFactory(new TestPlugin("Test"))
-                .thatExcludesNonPlayersWithMessage("bye");
-        Conversation conversation = factory.buildConversation(forWhom);
-
-        // Begin the conversation
-        conversation.begin();
-        assertEquals("bye", forWhom.lastSentMessage);
-        assertEquals(conversation, forWhom.begunConversation);
-        assertEquals(conversation, forWhom.abandonedConverstion);
-    }
-
-    private class FirstPrompt extends StringPrompt {
-
-        @Override
-        public String getPromptText(ConversationContext context) {
-            return "FirstPrompt";
-        }
-
-        @Override
-        public Prompt acceptInput(ConversationContext context, String input) {
-            assertEquals("FirstInput", input);
-            context.setSessionData("data", 10);
-            return new SecondPrompt();
-        }
-    }
-
-    private class SecondPrompt extends MessagePrompt {
-
-        @Override
-        protected Prompt getNextPrompt(ConversationContext context) {
-            return Prompt.END_OF_CONVERSATION;
-        }
-
-        @Override
-        public String getPromptText(ConversationContext context) {
-            // Assert that session data passes from one prompt to the next
-            assertEquals(context.getSessionData("data"), 10);
-            return "SecondPrompt";
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/conversations/FakeConversable.java b/src/test/java/org/bukkit/conversations/FakeConversable.java
deleted file mode 100644
index 1e6b48c7..00000000
--- a/src/test/java/org/bukkit/conversations/FakeConversable.java
+++ /dev/null
@@ -1,110 +0,0 @@
-package org.bukkit.conversations;
-
-import java.util.Set;
-import org.bukkit.Server;
-import org.bukkit.permissions.Permission;
-import org.bukkit.permissions.PermissionAttachment;
-import org.bukkit.permissions.PermissionAttachmentInfo;
-import org.bukkit.plugin.Plugin;
-
-/**
- */
-public class FakeConversable implements Conversable {
-    public String lastSentMessage;
-    public Conversation begunConversation;
-    public Conversation abandonedConverstion;
-    public ConversationAbandonedEvent abandonedConversationEvent;
-
-    @Override
-    public boolean isConversing() {
-        return false;
-    }
-
-    @Override
-    public void acceptConversationInput(String input) {
-
-    }
-
-    @Override
-    public boolean beginConversation(Conversation conversation) {
-        begunConversation = conversation;
-        conversation.outputNextPrompt();
-        return true;
-    }
-
-    @Override
-    public void abandonConversation(Conversation conversation) {
-        abandonedConverstion = conversation;
-    }
-
-    @Override
-    public void abandonConversation(Conversation conversation, ConversationAbandonedEvent details) {
-        abandonedConverstion = conversation;
-        abandonedConversationEvent = details;
-    }
-
-    @Override
-    public void sendRawMessage(String message) {
-        lastSentMessage = message;
-    }
-
-    public Server getServer() {
-        return null;
-    }
-
-    public String getName() {
-        return null;
-    }
-
-    public boolean isPermissionSet(String name) {
-        return false;
-    }
-
-    public boolean isPermissionSet(Permission perm) {
-        return false;
-    }
-
-    public boolean hasPermission(String name) {
-        return false;
-    }
-
-    public boolean hasPermission(Permission perm) {
-        return false;
-    }
-
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
-        return null;
-    }
-
-    public PermissionAttachment addAttachment(Plugin plugin) {
-        return null;
-    }
-
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
-        return null;
-    }
-
-    public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
-        return null;
-    }
-
-    public void removeAttachment(PermissionAttachment attachment) {
-
-    }
-
-    public void recalculatePermissions() {
-
-    }
-
-    public Set<PermissionAttachmentInfo> getEffectivePermissions() {
-        return null;
-    }
-
-    public boolean isOp() {
-        return false;
-    }
-
-    public void setOp(boolean value) {
-
-    }
-}
diff --git a/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java b/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
deleted file mode 100644
index 6093e986..00000000
--- a/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
+++ /dev/null
@@ -1,118 +0,0 @@
-package org.bukkit.conversations;
-
-import static org.junit.Assert.*;
-import org.junit.Test;
-
-/**
- */
-public class ValidatingPromptTest {
-
-    @Test
-    public void TestBooleanPrompt() {
-        TestBooleanPrompt prompt = new TestBooleanPrompt();
-        assertTrue(prompt.isInputValid(null, "true"));
-        assertFalse(prompt.isInputValid(null, "bananas"));
-        prompt.acceptInput(null, "true");
-        assertTrue(prompt.result);
-        prompt.acceptInput(null, "no");
-        assertFalse(prompt.result);
-    }
-
-    @Test
-    public void TestFixedSetPrompt() {
-        TestFixedSetPrompt prompt = new TestFixedSetPrompt("foo", "bar");
-        assertTrue(prompt.isInputValid(null, "foo"));
-        assertFalse(prompt.isInputValid(null, "cheese"));
-        prompt.acceptInput(null, "foo");
-        assertEquals("foo", prompt.result);
-    }
-
-    @Test
-    public void TestNumericPrompt() {
-        TestNumericPrompt prompt = new TestNumericPrompt();
-        assertTrue(prompt.isInputValid(null, "1010220"));
-        assertFalse(prompt.isInputValid(null, "tomato"));
-        prompt.acceptInput(null, "1010220");
-        assertEquals(1010220, prompt.result);
-    }
-
-    @Test
-    public void TestRegexPrompt() {
-        TestRegexPrompt prompt = new TestRegexPrompt("a.c");
-        assertTrue(prompt.isInputValid(null, "abc"));
-        assertTrue(prompt.isInputValid(null, "axc"));
-        assertFalse(prompt.isInputValid(null, "xyz"));
-        prompt.acceptInput(null, "abc");
-        assertEquals("abc", prompt.result);
-    }
-
-    //TODO: TestPlayerNamePrompt()
-
-    private class TestBooleanPrompt extends BooleanPrompt {
-        public boolean result;
-
-        @Override
-        protected Prompt acceptValidatedInput(ConversationContext context, boolean input) {
-            result = input;
-            return null;
-        }
-
-        @Override
-        public String getPromptText(ConversationContext context) {
-            return null;
-        }
-    }
-
-    private class TestFixedSetPrompt extends FixedSetPrompt {
-        public String result;
-
-        public TestFixedSetPrompt(String... fixedSet) {
-            super(fixedSet);
-        }
-
-        @Override
-        protected Prompt acceptValidatedInput(ConversationContext context, String input) {
-            result = input;
-            return null;
-        }
-
-        @Override
-        public String getPromptText(ConversationContext context) {
-            return null;
-        }
-    }
-
-    private class TestNumericPrompt extends NumericPrompt {
-        public Number result;
-
-        @Override
-        protected Prompt acceptValidatedInput(ConversationContext context, Number input) {
-            result = input;
-            return null;
-        }
-
-        @Override
-        public String getPromptText(ConversationContext context) {
-            return null;
-        }
-    }
-
-    private class TestRegexPrompt extends RegexPrompt {
-        public String result;
-
-        public TestRegexPrompt(String pattern) {
-            super(pattern);
-        }
-
-        @Override
-        protected Prompt acceptValidatedInput(ConversationContext context, String input) {
-            result = input;
-            return null;
-        }
-
-        @Override
-        public String getPromptText(ConversationContext context) {
-            return null;
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java b/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
deleted file mode 100644
index b955f6a7..00000000
--- a/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package org.bukkit.entity.memory;
-
-import java.util.Arrays;
-import java.util.List;
-import org.bukkit.NamespacedKey;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class MemoryKeyTest {
-
-    @Test
-    public void shouldContainAllMemories() {
-        List<MemoryKey> memories = Arrays.asList(MemoryKey.HOME, MemoryKey.JOB_SITE, MemoryKey.MEETING_POINT);
-        Assert.assertTrue(MemoryKey.values().containsAll(memories));
-    }
-
-    @Test
-    public void shouldGetMemoryKeyHomeByNamespacedKey() {
-        Assert.assertEquals(MemoryKey.HOME, MemoryKey.getByKey(NamespacedKey.minecraft("home")));
-    }
-
-    @Test
-    public void shouldGetMemoryKeyJobSiteByNamespacedKey() {
-        Assert.assertEquals(MemoryKey.JOB_SITE, MemoryKey.getByKey(NamespacedKey.minecraft("job_site")));
-    }
-
-    @Test
-    public void shouldGetMemoryKeyMeetingPointByNamespacedKey() {
-        Assert.assertEquals(MemoryKey.MEETING_POINT, MemoryKey.getByKey(NamespacedKey.minecraft("meeting_point")));
-    }
-
-    @Test
-    public void shouldReturnNullWhenNamespacedKeyisNotPresentAsMemoryKey() {
-        Assert.assertEquals(null, MemoryKey.getByKey(NamespacedKey.minecraft("not_present")));
-    }
-
-    @Test
-    public void shouldReturnNullWhenNamespacedKeyisNull() {
-        Assert.assertNull(MemoryKey.getByKey(null));
-    }
-}
diff --git a/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java b/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
deleted file mode 100644
index dd5fb243..00000000
--- a/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package org.bukkit.event;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.ImmutableList;
-import org.bukkit.event.player.PlayerChatTabCompleteEvent;
-import org.bukkit.plugin.messaging.TestPlayer;
-import org.junit.Test;
-
-public class PlayerChatTabCompleteEventTest {
-
-    @Test
-    public void testGetLastToken() {
-        assertThat(getToken("Hello everyone!"), is("everyone!"));
-        assertThat(getToken(" welcome to the show..."), is("show..."));
-        assertThat(getToken("The whitespace is here "), is(""));
-        assertThat(getToken("Too much whitespace is here  "), is(""));
-        assertThat(getToken("The_whitespace_is_missing"), is("The_whitespace_is_missing"));
-        assertThat(getToken(""), is(""));
-        assertThat(getToken(" "), is(""));
-    }
-
-    private String getToken(String message) {
-        return new PlayerChatTabCompleteEvent(TestPlayer.getInstance(), message, ImmutableList.<String>of()).getLastToken();
-    }
-}
diff --git a/src/test/java/org/bukkit/event/SyntheticEventTest.java b/src/test/java/org/bukkit/event/SyntheticEventTest.java
deleted file mode 100644
index d402cb59..00000000
--- a/src/test/java/org/bukkit/event/SyntheticEventTest.java
+++ /dev/null
@@ -1,48 +0,0 @@
-package org.bukkit.event;
-
-import org.bukkit.TestServer;
-import org.bukkit.plugin.PluginLoader;
-import org.bukkit.plugin.SimplePluginManager;
-import org.bukkit.plugin.TestPlugin;
-import org.bukkit.plugin.java.JavaPluginLoader;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class SyntheticEventTest {
-    @SuppressWarnings("deprecation")
-    @Test
-    public void test() {
-        final JavaPluginLoader loader = new JavaPluginLoader(TestServer.getInstance());
-        TestPlugin plugin = new TestPlugin(getClass().getName()) {
-            @Override
-            public PluginLoader getPluginLoader() {
-                return loader;
-            }
-        };
-        SimplePluginManager pluginManager = new SimplePluginManager(TestServer.getInstance(), null);
-
-        TestEvent event = new TestEvent(false);
-        Impl impl = new Impl();
-
-        pluginManager.registerEvents(impl, plugin);
-        pluginManager.callEvent(event);
-
-        Assert.assertEquals(1, impl.callCount);
-    }
-
-    public abstract static class Base<E extends Event> implements Listener {
-        int callCount = 0;
-
-        public void accept(E evt) {
-            callCount++;
-        }
-    }
-
-    public static class Impl extends Base<TestEvent> {
-        @Override
-        @EventHandler
-        public void accept(TestEvent evt) {
-            super.accept(evt);
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/event/TestEvent.java b/src/test/java/org/bukkit/event/TestEvent.java
deleted file mode 100644
index 25904f5f..00000000
--- a/src/test/java/org/bukkit/event/TestEvent.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package org.bukkit.event;
-
-
-public class TestEvent extends Event {
-    private static final HandlerList handlers = new HandlerList();
-
-    public TestEvent(boolean async) {
-        super(async);
-    }
-
-    @Override
-    public HandlerList getHandlers() {
-        return handlers;
-    }
-
-    public static HandlerList getHandlerList() {
-        return handlers;
-    }
-}
diff --git a/src/test/java/org/bukkit/materials/MaterialDataTest.java b/src/test/java/org/bukkit/materials/MaterialDataTest.java
deleted file mode 100644
index 1bb00930..00000000
--- a/src/test/java/org/bukkit/materials/MaterialDataTest.java
+++ /dev/null
@@ -1,432 +0,0 @@
-package org.bukkit.materials;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import org.bukkit.CropState;
-import org.bukkit.Material;
-import org.bukkit.NetherWartsState;
-import org.bukkit.TreeSpecies;
-import org.bukkit.block.BlockFace;
-import org.bukkit.material.Comparator;
-import org.bukkit.material.Crops;
-import org.bukkit.material.Diode;
-import org.bukkit.material.Door;
-import org.bukkit.material.Hopper;
-import org.bukkit.material.Leaves;
-import org.bukkit.material.Mushroom;
-import org.bukkit.material.NetherWarts;
-import org.bukkit.material.Sapling;
-import org.bukkit.material.Tree;
-import org.bukkit.material.Wood;
-import org.bukkit.material.WoodenStep;
-import org.bukkit.material.types.MushroomBlockTexture;
-import org.junit.Test;
-
-public class MaterialDataTest {
-
-    @Test
-    public void testDoor()
-    {
-        @SuppressWarnings("deprecation")
-        Door door = new Door();
-        assertThat("Constructed with default door type",door.getItemType(),equalTo(Material.LEGACY_WOODEN_DOOR));
-        assertThat("Constructed with default top or bottom",door.isTopHalf(),equalTo(false));
-        assertThat("Constructed with default direction",door.getFacing(),equalTo(BlockFace.WEST));
-        assertThat("Constructed with default open state",door.isOpen(),equalTo(false));
-
-        Material[] types = new Material[] { Material.LEGACY_WOODEN_DOOR,
-                Material.LEGACY_IRON_DOOR_BLOCK, Material.LEGACY_SPRUCE_DOOR,
-                Material.LEGACY_BIRCH_DOOR, Material.LEGACY_JUNGLE_DOOR,
-                Material.LEGACY_ACACIA_DOOR, Material.LEGACY_DARK_OAK_DOOR };
-        BlockFace[] directions = new BlockFace[] { BlockFace.WEST, BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH };
-        boolean[] openStates = new boolean[] {false, true};
-        boolean[] hingeStates = new boolean[] {false, true};
-        for(Material type : types)
-        {
-            // Test bottom half
-            for(BlockFace facing : directions)
-            {
-                door = new Door(type,facing);
-                assertThat("Constructed with correct door type",door.getItemType(),equalTo(type));
-                assertThat("Constructed with default top or bottom",door.isTopHalf(),equalTo(false));
-                assertThat("Constructed with correct direction",door.getFacing(),equalTo(facing));
-                assertThat("Constructed with default open state",door.isOpen(),equalTo(false));
-
-                for(boolean openState : openStates)
-                {
-                    door = new Door(type,facing,openState);
-                    assertThat("Constructed with correct door type",door.getItemType(),equalTo(type));
-                    assertThat("Constructed with default top or bottom",door.isTopHalf(),equalTo(false));
-                    assertThat("Constructed with correct direction",door.getFacing(),equalTo(facing));
-                    assertThat("Constructed with correct open state",door.isOpen(),equalTo(openState));
-                }
-            }
-
-            // Test top half
-            for(boolean hingeState : hingeStates)
-            {
-                door = new Door(type,hingeState);
-                assertThat("Constructed with correct door type",door.getItemType(),equalTo(type));
-                assertThat("Constructed with default top or bottom",door.isTopHalf(),equalTo(true));
-                assertThat("Constructed with correct direction",door.getHinge(),equalTo(hingeState));
-            }
-        }
-    }
-
-    @Test
-    public void testWood() {
-        Wood wood = new Wood();
-        assertThat("Constructed with default wood type", wood.getItemType(), equalTo(Material.LEGACY_WOOD));
-        assertThat("Constructed with default tree species", wood.getSpecies(), equalTo(TreeSpecies.GENERIC));
-
-        TreeSpecies[] allSpecies = TreeSpecies.values();
-        for (TreeSpecies species : allSpecies) {
-            wood = new Wood(species);
-            assertThat("Constructed with default wood type", wood.getItemType(), equalTo(Material.LEGACY_WOOD));
-            assertThat("Constructed with correct tree species", wood.getSpecies(), equalTo(species));
-        }
-
-        Material[] types = new Material[]{Material.LEGACY_WOOD, Material.LEGACY_WOOD_DOUBLE_STEP};
-        for (Material type : types) {
-            wood = new Wood(type);
-            assertThat("Constructed with correct wood type", wood.getItemType(), equalTo(type));
-            assertThat("Constructed with default tree species", wood.getSpecies(), equalTo(TreeSpecies.GENERIC));
-
-            for (TreeSpecies species : allSpecies) {
-                wood = new Wood(type, species);
-                assertThat("Constructed with correct wood type", wood.getItemType(), equalTo(type));
-                assertThat("Constructed with correct tree species", wood.getSpecies(), equalTo(species));
-            }
-        }
-    }
-
-    @Test
-    public void testTree() {
-        Tree tree = new Tree();
-        assertThat("Constructed with default tree type", tree.getItemType(), equalTo(Material.LEGACY_LOG));
-        assertThat("Constructed with default tree species", tree.getSpecies(), equalTo(TreeSpecies.GENERIC));
-        assertThat("Constructed with default direction", tree.getDirection(), equalTo(BlockFace.UP));
-
-        tree = new Tree(Material.LEGACY_LOG);
-        assertThat("Constructed with correct tree type", tree.getItemType(), equalTo(Material.LEGACY_LOG));
-        assertThat("Constructed with default tree species", tree.getSpecies(), equalTo(TreeSpecies.GENERIC));
-        assertThat("Constructed with default direction", tree.getDirection(), equalTo(BlockFace.UP));
-
-        Material[] types = new Material[]{Material.LEGACY_LOG, Material.LEGACY_LOG_2};
-        TreeSpecies[][] allSpecies = new TreeSpecies[][]{
-            {TreeSpecies.GENERIC, TreeSpecies.REDWOOD, TreeSpecies.BIRCH, TreeSpecies.JUNGLE},
-            {TreeSpecies.ACACIA, TreeSpecies.DARK_OAK}
-        };
-        BlockFace[] allDirections = new BlockFace[]{BlockFace.UP, BlockFace.WEST, BlockFace.NORTH, BlockFace.SELF};
-        for (int t = 0; t < types.length; t++) {
-            for (TreeSpecies species : allSpecies[t]) {
-                tree = new Tree(types[t], species);
-                assertThat("Constructed with correct tree type", tree.getItemType(), equalTo(types[t]));
-                assertThat("Constructed with correct tree species", tree.getSpecies(), equalTo(species));
-                assertThat("Constructed with default direction", tree.getDirection(), equalTo(BlockFace.UP));
-
-                // check item type is fixed automatically for invalid type-species combo
-                tree = new Tree(types[types.length - 1 - t], species);
-                assertThat("Constructed with fixed tree type", tree.getItemType(), equalTo(types[t]));
-                assertThat("Constructed with correct tree species", tree.getSpecies(), equalTo(species));
-                assertThat("Constructed with default direction", tree.getDirection(), equalTo(BlockFace.UP));
-                for (BlockFace dir : allDirections) {
-                    tree = new Tree(types[t], species, dir);
-                    assertThat("Constructed with correct tree type", tree.getItemType(), equalTo(types[t]));
-                    assertThat("Constructed with correct tree species", tree.getSpecies(), equalTo(species));
-                    assertThat("Constructed with correct direction", tree.getDirection(), equalTo(dir));
-                }
-            }
-        }
-    }
-
-    @Test
-    public void testLeaves() {
-        Leaves leaves = new Leaves();
-        assertThat("Constructed with default leaf type", leaves.getItemType(), equalTo(Material.LEGACY_LEAVES));
-        assertThat("Constructed with default tree species", leaves.getSpecies(), equalTo(TreeSpecies.GENERIC));
-        assertThat("Constructed with default decayable", leaves.isDecayable(), equalTo(true));
-        assertThat("Constructed with default decaying", leaves.isDecaying(), equalTo(false));
-
-        leaves = new Leaves(Material.LEGACY_LEAVES);
-        assertThat("Constructed with correct leaf type", leaves.getItemType(), equalTo(Material.LEGACY_LEAVES));
-        assertThat("Constructed with default tree species", leaves.getSpecies(), equalTo(TreeSpecies.GENERIC));
-        assertThat("Constructed with default decayable", leaves.isDecayable(), equalTo(true));
-        assertThat("Constructed with default decaying", leaves.isDecaying(), equalTo(false));
-
-        Material[] types = new Material[]{Material.LEGACY_LEAVES, Material.LEGACY_LEAVES_2};
-        TreeSpecies[][] allSpecies = new TreeSpecies[][]{
-            {TreeSpecies.GENERIC, TreeSpecies.REDWOOD, TreeSpecies.BIRCH, TreeSpecies.JUNGLE},
-            {TreeSpecies.ACACIA, TreeSpecies.DARK_OAK}
-        };
-        boolean[] decayable = new boolean[]{true, false};
-        boolean[] decaying = new boolean[]{true, false};
-        for (int t = 0; t < types.length; t++) {
-            for (TreeSpecies species : allSpecies[t]) {
-                leaves = new Leaves(types[t], species);
-                assertThat("Constructed with correct leaf type", leaves.getItemType(), equalTo(types[t]));
-                assertThat("Constructed with correct tree species", leaves.getSpecies(), equalTo(species));
-                assertThat("Constructed with default decayable", leaves.isDecayable(), equalTo(true));
-                assertThat("Constructed with default decaying", leaves.isDecaying(), equalTo(false));
-
-                // check item type is fixed automatically for invalid type-species combo
-                leaves = new Leaves(types[types.length - 1 - t], species);
-                assertThat("Constructed with fixed leaf type", leaves.getItemType(), equalTo(types[t]));
-                assertThat("Constructed with correct tree species", leaves.getSpecies(), equalTo(species));
-                assertThat("Constructed with default decayable", leaves.isDecayable(), equalTo(true));
-                assertThat("Constructed with default decaying", leaves.isDecaying(), equalTo(false));
-                for (boolean isDecayable : decayable) {
-                    leaves = new Leaves(types[t], species, isDecayable);
-                    assertThat("Constructed with correct wood type", leaves.getItemType(), equalTo(types[t]));
-                    assertThat("Constructed with correct tree species", leaves.getSpecies(), equalTo(species));
-                    assertThat("Constructed with correct decayable", leaves.isDecayable(), equalTo(isDecayable));
-                    assertThat("Constructed with default decaying", leaves.isDecaying(), equalTo(false));
-                    for (boolean isDecaying : decaying) {
-                        leaves = new Leaves(types[t], species, isDecayable);
-                        leaves.setDecaying(isDecaying);
-                        assertThat("Constructed with correct wood type", leaves.getItemType(), equalTo(types[t]));
-                        assertThat("Constructed with correct tree species", leaves.getSpecies(), equalTo(species));
-                        assertThat("Constructed with correct decayable", leaves.isDecayable(), equalTo(isDecaying || isDecayable));
-                        assertThat("Constructed with correct decaying", leaves.isDecaying(), equalTo(isDecaying));
-                    }
-                }
-            }
-        }
-    }
-
-    @Test
-    public void testWoodenStep() {
-        WoodenStep woodenStep = new WoodenStep();
-        assertThat("Constructed with default step type", woodenStep.getItemType(), equalTo(Material.LEGACY_WOOD_STEP));
-        assertThat("Constructed with default tree species", woodenStep.getSpecies(), equalTo(TreeSpecies.GENERIC));
-        assertThat("Constructed with default inversion", woodenStep.isInverted(), equalTo(false));
-
-        TreeSpecies[] allSpecies = TreeSpecies.values();
-        boolean[] inversion = new boolean[]{true, false};
-        for (TreeSpecies species : allSpecies) {
-            woodenStep = new WoodenStep(species);
-            assertThat("Constructed with default step type", woodenStep.getItemType(), equalTo(Material.LEGACY_WOOD_STEP));
-            assertThat("Constructed with correct tree species", woodenStep.getSpecies(), equalTo(species));
-            assertThat("Constructed with default inversion", woodenStep.isInverted(), equalTo(false));
-            for (boolean isInverted : inversion) {
-                woodenStep = new WoodenStep(species, isInverted);
-                assertThat("Constructed with default step type", woodenStep.getItemType(), equalTo(Material.LEGACY_WOOD_STEP));
-                assertThat("Constructed with correct tree species", woodenStep.getSpecies(), equalTo(species));
-                assertThat("Constructed with correct inversion", woodenStep.isInverted(), equalTo(isInverted));
-            }
-        }
-    }
-
-    @Test
-    public void testSapling() {
-        Sapling sapling = new Sapling();
-        assertThat("Constructed with default sapling type", sapling.getItemType(), equalTo(Material.LEGACY_SAPLING));
-        assertThat("Constructed with default tree species", sapling.getSpecies(), equalTo(TreeSpecies.GENERIC));
-        assertThat("Constructed with default growable", sapling.isInstantGrowable(), equalTo(false));
-
-        TreeSpecies[] allSpecies = TreeSpecies.values();
-        boolean[] growable = new boolean[]{true, false};
-        for (TreeSpecies species : allSpecies) {
-            sapling = new Sapling(species);
-            assertThat("Constructed with default sapling type", sapling.getItemType(), equalTo(Material.LEGACY_SAPLING));
-            assertThat("Constructed with correct tree species", sapling.getSpecies(), equalTo(species));
-            assertThat("Constructed with default growable", sapling.isInstantGrowable(), equalTo(false));
-            for (boolean isInstantGrowable : growable) {
-                sapling = new Sapling(species, isInstantGrowable);
-                assertThat("Constructed with default sapling type", sapling.getItemType(), equalTo(Material.LEGACY_SAPLING));
-                assertThat("Constructed with correct tree species", sapling.getSpecies(), equalTo(species));
-                assertThat("Constructed with correct growable", sapling.isInstantGrowable(), equalTo(isInstantGrowable));
-            }
-        }
-    }
-
-    @Test
-    public void testMushroom() {
-        Material[] mushroomTypes = new Material[] { Material.LEGACY_HUGE_MUSHROOM_1, Material.LEGACY_HUGE_MUSHROOM_2 };
-        BlockFace[] setFaces = new BlockFace[] { BlockFace.SELF, BlockFace.UP, BlockFace.NORTH,
-                BlockFace.SOUTH, BlockFace.EAST, BlockFace.WEST, BlockFace.NORTH_EAST, BlockFace.NORTH_WEST,
-                BlockFace.SOUTH_EAST, BlockFace.SOUTH_WEST };
-        MushroomBlockTexture[] textures = MushroomBlockTexture.values();
-        for (Material type : mushroomTypes) {
-            Mushroom mushroom = new Mushroom(type);
-            assertThat("Constructed with correct mushroom type", mushroom.getItemType(), equalTo(type));
-            assertThat("Constructed with default pores face", mushroom.getBlockTexture(), equalTo(MushroomBlockTexture.ALL_PORES));
-
-            for (int f = 0; f < setFaces.length; f++) {
-                mushroom = new Mushroom(type, setFaces[f]);
-                assertThat("Constructed with correct mushroom type", mushroom.getItemType(), equalTo(type));
-                assertThat("Constructed with correct texture", mushroom.getBlockTexture(), equalTo(MushroomBlockTexture.getCapByFace(setFaces[f])));
-            }
-
-            for (MushroomBlockTexture texture : textures) {
-                mushroom = new Mushroom(type, texture);
-                assertThat("Constructed with correct mushroom type", mushroom.getItemType(), equalTo(type));
-                assertThat("Constructed with correct texture", mushroom.getBlockTexture(), equalTo(texture));
-            }
-        }
-    }
-
-    @Test
-    public void testCrops() {
-        Crops crops = new Crops();
-        assertThat("Constructed with default crops type", crops.getItemType(), equalTo(Material.LEGACY_CROPS));
-        assertThat("Constructed with default crop state", crops.getState(), equalTo(CropState.SEEDED));
-
-        CropState[] allStates = CropState.values();
-        for (CropState state : allStates) {
-            crops = new Crops(state);
-            assertThat("Constructed with default crops type", crops.getItemType(), equalTo(Material.LEGACY_CROPS));
-            assertThat("Constructed with correct crop state", crops.getState(), equalTo(state));
-        }
-
-        // The crops which fully implement all crop states
-        Material[] allCrops = new Material[] {Material.LEGACY_CROPS, Material.LEGACY_CARROT, Material.LEGACY_POTATO};
-        for (Material crop : allCrops) {
-            crops = new Crops(crop);
-            assertThat("Constructed with correct crops type", crops.getItemType(), equalTo(crop));
-            assertThat("Constructed with default crop state", crops.getState(), equalTo(CropState.SEEDED));
-
-            for (CropState state : allStates) {
-                crops = new Crops(crop, state);
-                assertThat("Constructed with correct crops type", crops.getItemType(), equalTo(crop));
-                assertThat("Constructed with correct crop state", crops.getState(), equalTo(state));
-            }
-        }
-
-        // Beetroot are crops too, but they only have four states
-        // Setting different crop states for beetroot will return the following when retrieved back
-        CropState[] beetrootStates = new CropState[] {CropState.SEEDED, CropState.SEEDED, CropState.SMALL, CropState.SMALL, CropState.TALL, CropState.TALL, CropState.RIPE, CropState.RIPE};
-        assertThat("Beetroot state translations match size", beetrootStates.length, equalTo(allStates.length));
-        crops = new Crops(Material.LEGACY_BEETROOT_BLOCK);
-        assertThat("Constructed with correct crops type", crops.getItemType(), equalTo(Material.LEGACY_BEETROOT_BLOCK));
-        assertThat("Constructed with default crop state", crops.getState(), equalTo(CropState.SEEDED));
-        for (int s = 0; s < beetrootStates.length; s++) {
-            crops = new Crops(Material.LEGACY_BEETROOT_BLOCK, allStates[s]);
-            assertThat("Constructed with correct crops type", crops.getItemType(), equalTo(Material.LEGACY_BEETROOT_BLOCK));
-            assertThat("Constructed with correct crop state", crops.getState(), equalTo(beetrootStates[s]));
-        }
-
-        // In case you want to treat NetherWarts as Crops, although they really aren't
-        crops = new Crops(Material.LEGACY_NETHER_WARTS);
-        NetherWarts warts = new NetherWarts();
-        assertThat("Constructed with correct crops type", crops.getItemType(), equalTo(warts.getItemType()));
-        assertThat("Constructed with default crop state", crops.getState(), equalTo(CropState.SEEDED));
-        assertThat("Constructed with default wart state", warts.getState(), equalTo(NetherWartsState.SEEDED));
-        allStates = new CropState[] {CropState.SEEDED, CropState.SMALL, CropState.TALL, CropState.RIPE};
-        NetherWartsState[] allWartStates = NetherWartsState.values();
-        assertThat("Nether Warts state translations match size", allWartStates.length, equalTo(allStates.length));
-        for (int s = 0; s < allStates.length; s++) {
-            crops = new Crops(Material.LEGACY_NETHER_WARTS, allStates[s]);
-            warts = new NetherWarts(allWartStates[s]);
-            assertThat("Constructed with correct crops type", crops.getItemType(), equalTo(warts.getItemType()));
-            assertThat("Constructed with correct crop state", crops.getState(), equalTo(allStates[s]));
-            assertThat("Constructed with correct wart state", warts.getState(), equalTo(allWartStates[s]));
-        }
-    }
-
-    @Test
-    public void testDiode() {
-        Diode diode = new Diode();
-        assertThat("Constructed with backward compatible diode state", diode.getItemType(), equalTo(Material.LEGACY_DIODE_BLOCK_ON));
-        assertThat("Constructed with backward compatible powered", diode.isPowered(), equalTo(true));
-        assertThat("Constructed with default delay", diode.getDelay(), equalTo(1));
-        assertThat("Constructed with default direction", diode.getFacing(), equalTo(BlockFace.NORTH));
-
-        BlockFace[] directions = new BlockFace[] {BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST};
-        int[] delays = new int[] {1, 2, 3, 4};
-        boolean[] states = new boolean[] {false, true};
-        for (BlockFace direction : directions) {
-            diode = new Diode(direction);
-            assertThat("Constructed with default diode state", diode.getItemType(), equalTo(Material.LEGACY_DIODE_BLOCK_OFF));
-            assertThat("Constructed with default powered", diode.isPowered(), equalTo(false));
-            assertThat("Constructed with default delay", diode.getDelay(), equalTo(1));
-            assertThat("Constructed with correct direction", diode.getFacing(), equalTo(direction));
-            for (int delay : delays) {
-                diode = new Diode(direction, delay);
-                assertThat("Constructed with default diode state", diode.getItemType(), equalTo(Material.LEGACY_DIODE_BLOCK_OFF));
-                assertThat("Constructed with default powered", diode.isPowered(), equalTo(false));
-                assertThat("Constructed with correct delay", diode.getDelay(), equalTo(delay));
-                assertThat("Constructed with correct direction", diode.getFacing(), equalTo(direction));
-                for (boolean state : states) {
-                    diode = new Diode(direction, delay, state);
-                    assertThat("Constructed with correct diode state", diode.getItemType(), equalTo(state ? Material.LEGACY_DIODE_BLOCK_ON : Material.LEGACY_DIODE_BLOCK_OFF));
-                    assertThat("Constructed with default powered", diode.isPowered(), equalTo(state));
-                    assertThat("Constructed with correct delay", diode.getDelay(), equalTo(delay));
-                    assertThat("Constructed with correct direction", diode.getFacing(), equalTo(direction));
-                }
-            }
-        }
-    }
-
-    @Test
-    public void testComparator() {
-        Comparator comparator = new Comparator();
-        assertThat("Constructed with default comparator state", comparator.getItemType(), equalTo(Material.LEGACY_REDSTONE_COMPARATOR_OFF));
-        assertThat("Constructed with default powered", comparator.isPowered(), equalTo(false));
-        assertThat("Constructed with default being powered", comparator.isBeingPowered(), equalTo(false));
-        assertThat("Constructed with default mode", comparator.isSubtractionMode(), equalTo(false));
-        assertThat("Constructed with default direction", comparator.getFacing(), equalTo(BlockFace.NORTH));
-
-        BlockFace[] directions = new BlockFace[] {BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST};
-        boolean[] modes = new boolean[] {false, true};
-        boolean[] states = new boolean[] {false, true};
-        for (BlockFace direction : directions) {
-            comparator = new Comparator(direction);
-            assertThat("Constructed with default comparator state", comparator.getItemType(), equalTo(Material.LEGACY_REDSTONE_COMPARATOR_OFF));
-            assertThat("Constructed with default powered", comparator.isPowered(), equalTo(false));
-            assertThat("Constructed with default being powered", comparator.isBeingPowered(), equalTo(false));
-            assertThat("Constructed with default mode", comparator.isSubtractionMode(), equalTo(false));
-            assertThat("Constructed with correct direction", comparator.getFacing(), equalTo(direction));
-            for (boolean mode : modes) {
-                comparator = new Comparator(direction, mode);
-                assertThat("Constructed with default comparator state", comparator.getItemType(), equalTo(Material.LEGACY_REDSTONE_COMPARATOR_OFF));
-                assertThat("Constructed with default powered", comparator.isPowered(), equalTo(false));
-                assertThat("Constructed with default being powered", comparator.isBeingPowered(), equalTo(false));
-                assertThat("Constructed with correct mode", comparator.isSubtractionMode(), equalTo(mode));
-                assertThat("Constructed with correct direction", comparator.getFacing(), equalTo(direction));
-                for (boolean state : states) {
-                    comparator = new Comparator(direction, mode, state);
-                    assertThat("Constructed with correct comparator state", comparator.getItemType(), equalTo(state ? Material.LEGACY_REDSTONE_COMPARATOR_ON : Material.LEGACY_REDSTONE_COMPARATOR_OFF));
-                    assertThat("Constructed with correct powered", comparator.isPowered(), equalTo(state));
-                    assertThat("Constructed with default being powered", comparator.isBeingPowered(), equalTo(false));
-                    assertThat("Constructed with correct mode", comparator.isSubtractionMode(), equalTo(mode));
-                    assertThat("Constructed with correct direction", comparator.getFacing(), equalTo(direction));
-
-                    // Check if the game sets the fourth bit, that block data is still interpreted correctly
-                    comparator.setData((byte)((comparator.getData() & 0x7) | 0x8));
-                    assertThat("Constructed with correct comparator state", comparator.getItemType(), equalTo(state ? Material.LEGACY_REDSTONE_COMPARATOR_ON : Material.LEGACY_REDSTONE_COMPARATOR_OFF));
-                    assertThat("Constructed with correct powered", comparator.isPowered(), equalTo(state));
-                    assertThat("Constructed with correct being powered", comparator.isBeingPowered(), equalTo(true));
-                    assertThat("Constructed with correct mode", comparator.isSubtractionMode(), equalTo(mode));
-                    assertThat("Constructed with correct direction", comparator.getFacing(), equalTo(direction));
-                }
-            }
-        }
-    }
-
-    @Test
-    public void testHopper() {
-        Hopper hopper = new Hopper();
-        assertThat("Constructed with default hopper type", hopper.getItemType(), equalTo(Material.LEGACY_HOPPER));
-        assertThat("Constructed with default active state", hopper.isActive(), equalTo(true));
-        assertThat("Constructed with default powered state", hopper.isPowered(), equalTo(false));
-        assertThat("Constructed with default direction", hopper.getFacing(), equalTo(BlockFace.DOWN));
-
-        BlockFace[] directions = new BlockFace[] {BlockFace.DOWN, BlockFace.NORTH, BlockFace.SOUTH, BlockFace.WEST, BlockFace.EAST};
-        boolean[] activeStates = new boolean[] {true, false};
-        for (BlockFace direction : directions) {
-            hopper = new Hopper(direction);
-            assertThat("Constructed with default hopper type", hopper.getItemType(), equalTo(Material.LEGACY_HOPPER));
-            assertThat("Constructed with default active state", hopper.isActive(), equalTo(true));
-            assertThat("Constructed with correct powered state", hopper.isPowered(), equalTo(false));
-            assertThat("Constructed with correct direction", hopper.getFacing(), equalTo(direction));
-            for(boolean isActive : activeStates) {
-                hopper = new Hopper(direction, isActive);
-                assertThat("Constructed with default hopper type", hopper.getItemType(), equalTo(Material.LEGACY_HOPPER));
-                assertThat("Constructed with correct active state", hopper.isActive(), equalTo(isActive));
-                assertThat("Constructed with correct powered state", hopper.isPowered(), equalTo(!isActive));
-                assertThat("Constructed with correct direction", hopper.getFacing(), equalTo(direction));
-            }
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java b/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
deleted file mode 100644
index e8cea99f..00000000
--- a/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package org.bukkit.metadata;
-
-import static org.junit.Assert.*;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.TestPlugin;
-import org.junit.Test;
-
-public class FixedMetadataValueTest {
-    private Plugin plugin = new TestPlugin("X");
-    private FixedMetadataValue subject;
-
-    @Test
-    public void testBasic() {
-        subject = new FixedMetadataValue(plugin, new Integer(50));
-        assertSame(plugin, subject.getOwningPlugin());
-        assertEquals(new Integer(50), subject.value());
-    }
-
-    @Test
-    public void testNumberTypes() {
-        subject = new FixedMetadataValue(plugin, new Integer(5));
-        assertEquals(new Integer(5), subject.value());
-        assertEquals(5, subject.asInt());
-        assertEquals(true, subject.asBoolean());
-        assertEquals(5, subject.asByte());
-        assertEquals(5.0, subject.asFloat(), 0.1e-8);
-        assertEquals(5.0D, subject.asDouble(), 0.1e-8D);
-        assertEquals(5L, subject.asLong());
-        assertEquals(5, subject.asShort());
-        assertEquals("5", subject.asString());
-    }
-
-    @Test
-    public void testInvalidateDoesNothing() {
-        Object o = new Object();
-        subject = new FixedMetadataValue(plugin, o);
-        subject.invalidate();
-        assertSame(o, subject.value());
-    }
-}
diff --git a/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java b/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
deleted file mode 100644
index f94754e4..00000000
--- a/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
+++ /dev/null
@@ -1,138 +0,0 @@
-package org.bukkit.metadata;
-
-import static org.junit.Assert.*;
-import java.util.concurrent.Callable;
-import org.bukkit.plugin.TestPlugin;
-import org.junit.Test;
-
-public class LazyMetadataValueTest {
-    private LazyMetadataValue subject;
-    private TestPlugin plugin = new TestPlugin("x");
-
-    @Test
-    public void testLazyInt() {
-        int value = 10;
-        subject = makeSimpleCallable(value);
-
-        assertEquals(value, subject.value());
-    }
-
-    @Test
-    public void testLazyDouble() {
-        double value = 10.5;
-        subject = makeSimpleCallable(value);
-
-        assertEquals(value, (Double)subject.value(), 0.01);
-    }
-
-    @Test
-    public void testLazyString() {
-        String value = "TEN";
-        subject = makeSimpleCallable(value);
-
-        assertEquals(value, subject.value());
-    }
-
-    @Test
-    public void testLazyBoolean() {
-        boolean value = false;
-        subject = makeSimpleCallable(value);
-
-        assertEquals(value, subject.value());
-    }
-
-    @Test(expected=MetadataEvaluationException.class)
-    public void testEvalException() {
-        subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.CACHE_AFTER_FIRST_EVAL, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                throw new RuntimeException("Gotcha!");
-            }
-        });
-        subject.value();
-    }
-
-    @Test
-    public void testCacheStrategyCacheAfterFirstEval() {
-        final Counter counter = new Counter();
-        final int value = 10;
-        subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.CACHE_AFTER_FIRST_EVAL, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                counter.increment();
-                return value;
-            }
-        });
-
-        subject.value();
-        subject.value();
-        assertEquals(value, subject.value());
-        assertEquals(1, counter.value());
-
-        subject.invalidate();
-        subject.value();
-        assertEquals(2, counter.value());
-    }
-
-    @Test
-    public void testCacheStrategyNeverCache() {
-        final Counter counter = new Counter();
-        final int value = 10;
-        subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.NEVER_CACHE, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                counter.increment();
-                return value;
-            }
-        });
-
-        subject.value();
-        subject.value();
-        assertEquals(value, subject.value());
-        assertEquals(3, counter.value());
-    }
-
-    @Test
-    public void testCacheStrategyEternally() {
-        final Counter counter = new Counter();
-        final int value = 10;
-        subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.CACHE_ETERNALLY, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                counter.increment();
-                return value;
-            }
-        });
-
-        subject.value();
-        subject.value();
-        assertEquals(value, subject.value());
-        assertEquals(1, counter.value());
-
-        subject.invalidate();
-        subject.value();
-        assertEquals(value, subject.value());
-        assertEquals(1, counter.value());
-    }
-
-    private LazyMetadataValue makeSimpleCallable(final Object value) {
-        return new LazyMetadataValue(plugin, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                return value;
-            }
-        });
-    }
-
-    private class Counter {
-        private int c = 0;
-
-        public void increment() {
-            c++;
-        }
-
-        public int value() {
-            return c;
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/metadata/MetadataConversionTest.java b/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
deleted file mode 100644
index a9c10a2f..00000000
--- a/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
+++ /dev/null
@@ -1,102 +0,0 @@
-//    Copyright (C) 2011  Ryan Michela
-//
-//    This program is free software: you can redistribute it and/or modify
-//    it under the terms of the GNU General Public License as published by
-//    the Free Software Foundation, either version 3 of the License, or
-//    (at your option) any later version.
-//
-//    This program is distributed in the hope that it will be useful,
-//    but WITHOUT ANY WARRANTY; without even the implied warranty of
-//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//    GNU General Public License for more details.
-//
-//    You should have received a copy of the GNU General Public License
-//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-package org.bukkit.metadata;
-
-import static org.junit.Assert.*;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.TestPlugin;
-import org.junit.Test;
-
-/**
- */
-public class MetadataConversionTest {
-    private Plugin plugin = new TestPlugin("x");
-    private FixedMetadataValue subject;
-
-    private void setSubject(Object value) {
-        subject = new FixedMetadataValue(plugin, value);
-    }
-
-    @Test
-    public void testFromInt() {
-        setSubject(10);
-
-        assertEquals(10, subject.asInt());
-        assertEquals(10, subject.asFloat(), 0.000001);
-        assertEquals(10, subject.asDouble(), 0.000001);
-        assertEquals(10, subject.asLong());
-        assertEquals(10, subject.asShort());
-        assertEquals(10, subject.asByte());
-        assertEquals(true, subject.asBoolean());
-        assertEquals("10", subject.asString());
-    }
-
-    @Test
-    public void testFromFloat() {
-        setSubject(10.5);
-
-        assertEquals(10, subject.asInt());
-        assertEquals(10.5, subject.asFloat(), 0.000001);
-        assertEquals(10.5, subject.asDouble(), 0.000001);
-        assertEquals(10, subject.asLong());
-        assertEquals(10, subject.asShort());
-        assertEquals(10, subject.asByte());
-        assertEquals(true, subject.asBoolean());
-        assertEquals("10.5", subject.asString());
-    }
-
-    @Test
-    public void testFromNumericString() {
-        setSubject("10");
-
-        assertEquals(10, subject.asInt());
-        assertEquals(10, subject.asFloat(), 0.000001);
-        assertEquals(10, subject.asDouble(), 0.000001);
-        assertEquals(10, subject.asLong());
-        assertEquals(10, subject.asShort());
-        assertEquals(10, subject.asByte());
-        assertEquals(false, subject.asBoolean());
-        assertEquals("10", subject.asString());
-    }
-
-    @Test
-    public void testFromNonNumericString() {
-        setSubject("true");
-
-        assertEquals(0, subject.asInt());
-        assertEquals(0, subject.asFloat(), 0.000001);
-        assertEquals(0, subject.asDouble(), 0.000001);
-        assertEquals(0, subject.asLong());
-        assertEquals(0, subject.asShort());
-        assertEquals(0, subject.asByte());
-        assertEquals(true, subject.asBoolean());
-        assertEquals("true", subject.asString());
-    }
-
-    @Test
-    public void testFromNull() {
-        setSubject(null);
-
-        assertEquals(0, subject.asInt());
-        assertEquals(0, subject.asFloat(), 0.000001);
-        assertEquals(0, subject.asDouble(), 0.000001);
-        assertEquals(0, subject.asLong());
-        assertEquals(0, subject.asShort());
-        assertEquals(0, subject.asByte());
-        assertEquals(false, subject.asBoolean());
-        assertEquals("", subject.asString());
-    }
-}
diff --git a/src/test/java/org/bukkit/metadata/MetadataStoreTest.java b/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
deleted file mode 100644
index 12373ff1..00000000
--- a/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
+++ /dev/null
@@ -1,141 +0,0 @@
-package org.bukkit.metadata;
-
-import static org.junit.Assert.*;
-import java.util.List;
-import java.util.concurrent.Callable;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.TestPlugin;
-import org.junit.Test;
-
-public class MetadataStoreTest {
-    private Plugin pluginX = new TestPlugin("x");
-    private Plugin pluginY = new TestPlugin("y");
-
-    StringMetadataStore subject = new StringMetadataStore();
-
-    @Test
-    public void testMetadataStore() {
-        subject.setMetadata("subject", "key", new FixedMetadataValue(pluginX, 10));
-
-        assertTrue(subject.hasMetadata("subject", "key"));
-        List<MetadataValue> values = subject.getMetadata("subject", "key");
-        assertEquals(10, values.get(0).value());
-    }
-
-    @Test
-    public void testMetadataNotPresent() {
-        assertFalse(subject.hasMetadata("subject", "key"));
-        List<MetadataValue> values = subject.getMetadata("subject", "key");
-        assertTrue(values.isEmpty());
-    }
-
-    @Test
-    public void testInvalidateAll() {
-        final Counter counter = new Counter();
-
-        subject.setMetadata("subject", "key", new LazyMetadataValue(pluginX, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                counter.increment();
-                return 10;
-            }
-        }));
-
-        assertTrue(subject.hasMetadata("subject", "key"));
-        subject.getMetadata("subject", "key").get(0).value();
-        subject.invalidateAll(pluginX);
-        subject.getMetadata("subject", "key").get(0).value();
-        assertEquals(2, counter.value());
-    }
-
-    @Test
-    public void testInvalidateAllButActuallyNothing() {
-        final Counter counter = new Counter();
-
-        subject.setMetadata("subject", "key", new LazyMetadataValue(pluginX, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                counter.increment();
-                return 10;
-            }
-        }));
-
-        assertTrue(subject.hasMetadata("subject", "key"));
-        subject.getMetadata("subject", "key").get(0).value();
-        subject.invalidateAll(pluginY);
-        subject.getMetadata("subject", "key").get(0).value();
-        assertEquals(1, counter.value());
-    }
-
-    @Test
-    public void testMetadataReplace() {
-        subject.setMetadata("subject", "key", new FixedMetadataValue(pluginX, 10));
-        subject.setMetadata("subject", "key", new FixedMetadataValue(pluginY, 10));
-        subject.setMetadata("subject", "key", new FixedMetadataValue(pluginX, 20));
-
-        for (MetadataValue mv : subject.getMetadata("subject", "key")) {
-            if (mv.getOwningPlugin().equals(pluginX)) {
-                assertEquals(20, mv.value());
-            }
-            if (mv.getOwningPlugin().equals(pluginY)) {
-                assertEquals(10, mv.value());
-            }
-        }
-    }
-
-    @Test
-    public void testMetadataRemove() {
-        subject.setMetadata("subject", "key", new FixedMetadataValue(pluginX, 10));
-        subject.setMetadata("subject", "key", new FixedMetadataValue(pluginY, 20));
-        subject.removeMetadata("subject", "key", pluginX);
-
-        assertTrue(subject.hasMetadata("subject", "key"));
-        assertEquals(1, subject.getMetadata("subject", "key").size());
-        assertEquals(20, subject.getMetadata("subject", "key").get(0).value());
-    }
-
-    @Test
-    public void testMetadataRemoveLast() {
-        subject.setMetadata("subject", "key", new FixedMetadataValue(pluginX, 10));
-        subject.removeMetadata("subject", "key", pluginX);
-
-        assertFalse(subject.hasMetadata("subject", "key"));
-        assertEquals(0, subject.getMetadata("subject", "key").size());
-    }
-
-    @Test
-    public void testMetadataRemoveForNonExistingPlugin() {
-        subject.setMetadata("subject", "key", new FixedMetadataValue(pluginX, 10));
-        subject.removeMetadata("subject", "key", pluginY);
-
-        assertTrue(subject.hasMetadata("subject", "key"));
-        assertEquals(1, subject.getMetadata("subject", "key").size());
-        assertEquals(10, subject.getMetadata("subject", "key").get(0).value());
-    }
-
-    @Test
-    public void testHasMetadata() {
-        subject.setMetadata("subject", "key", new FixedMetadataValue(pluginX, 10));
-        assertTrue(subject.hasMetadata("subject", "key"));
-        assertFalse(subject.hasMetadata("subject", "otherKey"));
-    }
-
-    private class StringMetadataStore extends MetadataStoreBase<String> implements MetadataStore<String> {
-        @Override
-        protected String disambiguate(String subject, String metadataKey) {
-            return subject + ":" + metadataKey;
-        }
-    }
-
-    private class Counter {
-        int c = 0;
-
-        public void increment() {
-            c++;
-        }
-
-        public int value() {
-            return c;
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java b/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
deleted file mode 100644
index 2d545f0e..00000000
--- a/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
+++ /dev/null
@@ -1,98 +0,0 @@
-package org.bukkit.metadata;
-
-import static org.junit.Assert.*;
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.TestPlugin;
-import org.junit.Test;
-
-public class MetadataValueAdapterTest {
-    private TestPlugin plugin = new TestPlugin("x");
-
-    @Test
-    public void testAdapterBasics() {
-        IncrementingMetaValue mv = new IncrementingMetaValue(plugin);
-        // check getOwningPlugin
-        assertEquals(mv.getOwningPlugin(), this.plugin);
-
-        // Check value-getting and invalidation.
-        assertEquals(new Integer(1), mv.value());
-        assertEquals(new Integer(2), mv.value());
-        mv.invalidate();
-        assertEquals(new Integer(1), mv.value());
-    }
-
-    @Test
-    public void testAdapterConversions() {
-        IncrementingMetaValue mv = new IncrementingMetaValue(plugin);
-
-        assertEquals(1, mv.asInt());
-        assertEquals(2L, mv.asLong());
-        assertEquals(3.0, mv.asFloat(), 0.001);
-        assertEquals(4, mv.asByte());
-        assertEquals(5.0, mv.asDouble(), 0.001);
-        assertEquals(6, mv.asShort());
-        assertEquals("7", mv.asString());
-    }
-
-    /** Boolean conversion is non-trivial, we want to test it thoroughly. */
-    @Test
-    public void testBooleanConversion() {
-        // null is False.
-        assertEquals(false, simpleValue(null).asBoolean());
-
-        // String to boolean.
-        assertEquals(true, simpleValue("True").asBoolean());
-        assertEquals(true, simpleValue("TRUE").asBoolean());
-        assertEquals(false, simpleValue("false").asBoolean());
-
-        // Number to boolean.
-        assertEquals(true, simpleValue(1).asBoolean());
-        assertEquals(true, simpleValue(5.0).asBoolean());
-        assertEquals(false, simpleValue(0).asBoolean());
-        assertEquals(false, simpleValue(0.1).asBoolean());
-
-        // Boolean as boolean, of course.
-        assertEquals(true, simpleValue(Boolean.TRUE).asBoolean());
-        assertEquals(false, simpleValue(Boolean.FALSE).asBoolean());
-
-        // any object that is not null and not a Boolean, String, or Number is true.
-        assertEquals(true, simpleValue(new Object()).asBoolean());
-    }
-
-    /** Test String conversions return an empty string when given null. */
-    @Test
-    public void testStringConversionNull() {
-        assertEquals("", simpleValue(null).asString());
-    }
-
-    /** Get a fixed value MetadataValue. */
-    private MetadataValue simpleValue(Object value) {
-        return new FixedMetadataValue(plugin, value);
-    }
-
-    /**
-     * A sample non-trivial MetadataValueAdapter implementation.
-     *
-     * The rationale for implementing an incrementing value is to have a value
-     * which changes with every call to value(). This is important for testing
-     * because we want to make sure all the tested conversions are calling the
-     * value() method exactly once and no caching is going on.
-     */
-    class IncrementingMetaValue extends MetadataValueAdapter {
-        private int internalValue = 0;
-
-        protected IncrementingMetaValue(Plugin owningPlugin) {
-            super(owningPlugin);
-        }
-
-        @Override
-        public Object value() {
-            return ++internalValue;
-        }
-
-        @Override
-        public void invalidate() {
-            internalValue = 0;
-        }
-    }
-}
diff --git a/src/test/java/org/bukkit/plugin/PluginManagerTest.java b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
deleted file mode 100644
index bae26ce7..00000000
--- a/src/test/java/org/bukkit/plugin/PluginManagerTest.java
+++ /dev/null
@@ -1,182 +0,0 @@
-package org.bukkit.plugin;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import org.bukkit.TestServer;
-import org.bukkit.event.Event;
-import org.bukkit.event.TestEvent;
-import org.bukkit.permissions.Permission;
-import org.junit.After;
-import org.junit.Test;
-
-public class PluginManagerTest {
-    private class MutableObject {
-        volatile Object value = null;
-    }
-
-    private static final PluginManager pm = TestServer.getInstance().getPluginManager();
-
-    private final MutableObject store = new MutableObject();
-/* // Paper start - remove unneeded test
-    @Test
-    public void testAsyncSameThread() {
-        final Event event = new TestEvent(true);
-        try {
-            pm.callEvent(event);
-        } catch (IllegalStateException ex) {
-            assertThat(event.getEventName() + " cannot be triggered asynchronously from primary server thread.", is(ex.getMessage()));
-            return;
-        }
-        throw new IllegalStateException("No exception thrown");
-    }*/ // Paper end
-
-    @Test
-    public void testSyncSameThread() {
-        final Event event = new TestEvent(false);
-        pm.callEvent(event);
-    }
-/* // Paper start - remove unneeded test
-    @Test
-    public void testAsyncLocked() throws InterruptedException {
-        final Event event = new TestEvent(true);
-        Thread secondThread = new Thread(
-            new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        synchronized (pm) {
-                            pm.callEvent(event);
-                        }
-                    } catch (Throwable ex) {
-                        store.value = ex;
-                    }
-                }
-            }
-        );
-        secondThread.start();
-        secondThread.join();
-        assertThat(store.value, is(instanceOf(IllegalStateException.class)));
-        assertThat(event.getEventName() + " cannot be triggered asynchronously from inside synchronized code.", is(((Throwable) store.value).getMessage()));
-    }
-
-    @Test
-    public void testAsyncUnlocked() throws InterruptedException {
-        final Event event = new TestEvent(true);
-        Thread secondThread = new Thread(
-            new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        pm.callEvent(event);
-                    } catch (Throwable ex) {
-                        store.value = ex;
-                    }
-                }});
-        secondThread.start();
-        secondThread.join();
-        if (store.value != null) {
-            throw new RuntimeException((Throwable) store.value);
-        }
-    }
-
-    @Test
-    public void testSyncUnlocked() throws InterruptedException {
-        final Event event = new TestEvent(false);
-        Thread secondThread = new Thread(
-            new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        pm.callEvent(event);
-                    } catch (Throwable ex) {
-                        store.value = ex;
-                        assertThat(event.getEventName() + " cannot be triggered asynchronously from another thread.", is(ex.getMessage()));
-                        return;
-                    }
-                }
-            }
-        );
-        secondThread.start();
-        secondThread.join();
-        if (store.value == null) {
-            throw new IllegalStateException("No exception thrown");
-        }
-    }
-
-    @Test
-    public void testSyncLocked() throws InterruptedException {
-        final Event event = new TestEvent(false);
-        Thread secondThread = new Thread(
-            new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        synchronized (pm) {
-                            pm.callEvent(event);
-                        }
-                    } catch (Throwable ex) {
-                        store.value = ex;
-                        assertThat(event.getEventName() + " cannot be triggered asynchronously from another thread.", is(ex.getMessage()));
-                        return;
-                    }
-                }
-            }
-        );
-        secondThread.start();
-        secondThread.join();
-        if (store.value == null) {
-            throw new IllegalStateException("No exception thrown");
-        }
-    } */ // Paper
-
-    @Test
-    public void testRemovePermissionByNameLower() {
-        this.testRemovePermissionByName("lower");
-    }
-
-    @Test
-    public void testRemovePermissionByNameUpper() {
-        this.testRemovePermissionByName("UPPER");
-    }
-
-    @Test
-    public void testRemovePermissionByNameCamel() {
-        this.testRemovePermissionByName("CaMeL");
-    }
-
-    public void testRemovePermissionByPermissionLower() {
-        this.testRemovePermissionByPermission("lower");
-    }
-
-    @Test
-    public void testRemovePermissionByPermissionUpper() {
-        this.testRemovePermissionByPermission("UPPER");
-    }
-
-    @Test
-    public void testRemovePermissionByPermissionCamel() {
-        this.testRemovePermissionByPermission("CaMeL");
-    }
-
-    private void testRemovePermissionByName(final String name) {
-        final Permission perm = new Permission(name);
-        pm.addPermission(perm);
-        assertThat("Permission \"" + name + "\" was not added", pm.getPermission(name), is(perm));
-        pm.removePermission(name);
-        assertThat("Permission \"" + name + "\" was not removed", pm.getPermission(name), is(nullValue()));
-    }
-
-    private void testRemovePermissionByPermission(final String name) {
-        final Permission perm = new Permission(name);
-        pm.addPermission(perm);
-        assertThat("Permission \"" + name + "\" was not added", pm.getPermission(name), is(perm));
-        pm.removePermission(perm);
-        assertThat("Permission \"" + name + "\" was not removed", pm.getPermission(name), is(nullValue()));
-    }
-
-    @After
-    public void tearDown() {
-        pm.clearPlugins();
-        assertThat(pm.getPermissions(), is(empty()));
-    }
-}
diff --git a/src/test/java/org/bukkit/plugin/TestPlugin.java b/src/test/java/org/bukkit/plugin/TestPlugin.java
deleted file mode 100644
index 6d450897..00000000
--- a/src/test/java/org/bukkit/plugin/TestPlugin.java
+++ /dev/null
@@ -1,124 +0,0 @@
-package org.bukkit.plugin;
-
-import java.io.File;
-import java.io.InputStream;
-import java.util.List;
-import org.bukkit.Server;
-import org.bukkit.command.Command;
-import org.bukkit.command.CommandSender;
-import org.bukkit.configuration.file.FileConfiguration;
-import org.bukkit.generator.ChunkGenerator;
-
-public class TestPlugin extends PluginBase {
-    private boolean enabled = true;
-
-    private final String pluginName;
-
-    public TestPlugin(String pluginName) {
-        this.pluginName = pluginName;
-    }
-
-    public void setEnabled(boolean enabled) {
-        this.enabled = enabled;
-    }
-
-    @Override
-    public File getDataFolder() {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public PluginDescriptionFile getDescription() {
-        return new PluginDescriptionFile(pluginName, "1.0", "test.test");
-    }
-
-    @Override
-    public FileConfiguration getConfig() {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public InputStream getResource(String filename) {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public void saveConfig() {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public void saveDefaultConfig() {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public void saveResource(String resourcePath, boolean replace) {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public void reloadConfig() {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public PluginLogger getLogger() {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public PluginLoader getPluginLoader() {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public Server getServer() {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public boolean isEnabled() {
-        return enabled;
-    }
-
-    @Override
-    public void onDisable() {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public void onLoad() {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public void onEnable() {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public boolean isNaggable() {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public void setNaggable(boolean canNag) {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public ChunkGenerator getDefaultWorldGenerator(String worldName, String id) {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-
-    @Override
-    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
-        throw new UnsupportedOperationException("Not supported.");
-    }
-}
diff --git a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
deleted file mode 100644
index 351fc4a9..00000000
--- a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package org.bukkit.plugin;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import org.bukkit.event.Event;
-import org.bukkit.event.EventException;
-import org.bukkit.event.EventPriority;
-import org.bukkit.event.Listener;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.event.player.PlayerEvent;
-import org.bukkit.event.player.PlayerInteractEvent;
-import org.bukkit.event.player.PlayerMoveEvent;
-import org.junit.Test;
-
-public class TimedRegisteredListenerTest {
-
-    @Test
-    public void testEventClass() throws EventException {
-        Listener listener = new Listener() {};
-        EventExecutor executor = new EventExecutor() {
-            @Override
-            public void execute(Listener listener, Event event) {}
-        };
-        TestPlugin plugin = new TestPlugin("Test");
-
-        PlayerInteractEvent interactEvent = new PlayerInteractEvent(null, null, null, null, null);
-        PlayerMoveEvent moveEvent = new PlayerMoveEvent(null, null, null);
-        BlockBreakEvent breakEvent = new BlockBreakEvent(null, null);
-
-        TimedRegisteredListener trl = new TimedRegisteredListener(listener, executor, EventPriority.NORMAL, plugin, false);
-
-        // Ensure that the correct event type is reported for a single event
-        trl.callEvent(interactEvent);
-        assertThat(trl.getEventClass(), is((Object) PlayerInteractEvent.class));
-        // Ensure that no superclass is used in lieu of the actual event, after two identical event types
-        trl.callEvent(interactEvent);
-        assertThat(trl.getEventClass(), is((Object) PlayerInteractEvent.class));
-        // Ensure that the closest superclass of the two events is chosen
-        trl.callEvent(moveEvent);
-        assertThat(trl.getEventClass(), is((Object) PlayerEvent.class));
-        // As above, so below
-        trl.callEvent(breakEvent);
-        assertThat(trl.getEventClass(), is((Object) Event.class));
-        // In the name of being thorough, check that it never travels down the hierarchy again.
-        trl.callEvent(breakEvent);
-        assertThat(trl.getEventClass(), is((Object) Event.class));
-
-        trl = new TimedRegisteredListener(listener, executor, EventPriority.NORMAL, plugin, false);
-
-        trl.callEvent(breakEvent);
-        assertThat(trl.getEventClass(), is((Object) BlockBreakEvent.class));
-        // Test moving up the class hierarchy by more than one class at a time
-        trl.callEvent(moveEvent);
-        assertThat(trl.getEventClass(), is((Object) Event.class));
-    }
-}
diff --git a/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java b/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
deleted file mode 100644
index 7e2335ed..00000000
--- a/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
+++ /dev/null
@@ -1,305 +0,0 @@
-package org.bukkit.plugin.messaging;
-
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
-import java.util.Collection;
-import org.bukkit.entity.Player;
-import org.bukkit.plugin.TestPlugin;
-import org.junit.Assert;
-import org.junit.Test;
-
-public class StandardMessengerTest {
-    public StandardMessenger getMessenger() {
-        return new StandardMessenger();
-    }
-
-    private int count = 0;
-    public TestPlugin getPlugin() {
-        return new TestPlugin("" + count++);
-    }
-
-    @Test
-    public void testIsReservedChannel() {
-        Messenger messenger = getMessenger();
-
-        assertTrue(messenger.isReservedChannel("minecraft:register"));
-        assertFalse(messenger.isReservedChannel("test:register"));
-        assertTrue(messenger.isReservedChannel("minecraft:unregister"));
-        assertFalse(messenger.isReservedChannel("test:unregister")); // Paper - fix typo
-        assertFalse(messenger.isReservedChannel("minecraft:something")); // Paper - now less strict
-        assertFalse(messenger.isReservedChannel("minecraft:brand"));
-    }
-
-    @Test
-    public void testRegisterAndUnregisterOutgoingPluginChannel() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-
-        assertFalse(messenger.isOutgoingChannelRegistered(plugin, "test:foo"));
-        messenger.registerOutgoingPluginChannel(plugin, "test:foo");
-        assertTrue(messenger.isOutgoingChannelRegistered(plugin, "test:foo"));
-        assertFalse(messenger.isOutgoingChannelRegistered(plugin, "test:bar"));
-
-        messenger.unregisterOutgoingPluginChannel(plugin, "test:foo");
-        assertFalse(messenger.isOutgoingChannelRegistered(plugin, "test:foo"));
-    }
-
-    @Test(expected = ReservedChannelException.class)
-    public void testReservedOutgoingRegistration() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-
-        messenger.registerOutgoingPluginChannel(plugin, "minecraft:register");
-    }
-
-    @Test
-    public void testUnregisterOutgoingPluginChannel_Plugin() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-
-        assertFalse(messenger.isOutgoingChannelRegistered(plugin, "test:foo"));
-        messenger.registerOutgoingPluginChannel(plugin, "test:foo");
-        messenger.registerOutgoingPluginChannel(plugin, "test:bar");
-        assertTrue(messenger.isOutgoingChannelRegistered(plugin, "test:foo"));
-        assertTrue(messenger.isOutgoingChannelRegistered(plugin, "test:bar"));
-
-        messenger.unregisterOutgoingPluginChannel(plugin);
-        assertFalse(messenger.isOutgoingChannelRegistered(plugin, "test:foo"));
-        assertFalse(messenger.isOutgoingChannelRegistered(plugin, "test:bar"));
-    }
-
-    @Test
-    public void testRegisterIncomingPluginChannel() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-        TestMessageListener listener = new TestMessageListener("test:foo", "test:bar".getBytes());
-        Player player = TestPlayer.getInstance();
-        PluginMessageListenerRegistration registration = messenger.registerIncomingPluginChannel(plugin, "test:foo", listener);
-
-        assertTrue(registration.isValid());
-        assertTrue(messenger.isIncomingChannelRegistered(plugin, "test:foo"));
-        messenger.dispatchIncomingMessage(player, "test:foo", "test:bar".getBytes());
-        assertTrue(listener.hasReceived());
-
-        messenger.unregisterIncomingPluginChannel(plugin, "test:foo", listener);
-        listener.reset();
-
-        assertFalse(registration.isValid());
-        assertFalse(messenger.isIncomingChannelRegistered(plugin, "test:foo"));
-        messenger.dispatchIncomingMessage(player, "test:foo", "test:bar".getBytes());
-        assertFalse(listener.hasReceived());
-    }
-
-    @Test(expected = ReservedChannelException.class)
-    public void testReservedIncomingRegistration() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-
-        messenger.registerIncomingPluginChannel(plugin, "minecraft:register", new TestMessageListener("test:foo", "test:bar".getBytes()));
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testDuplicateIncomingRegistration() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-        TestMessageListener listener = new TestMessageListener("test:foo", "test:bar".getBytes());
-
-        messenger.registerIncomingPluginChannel(plugin, "test:baz", listener);
-        messenger.registerIncomingPluginChannel(plugin, "test:baz", listener);
-    }
-
-    @Test
-    public void testUnregisterIncomingPluginChannel_Plugin_String() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-        TestMessageListener listener1 = new TestMessageListener("test:foo", "test:bar".getBytes());
-        TestMessageListener listener2 = new TestMessageListener("test:baz", "test:qux".getBytes());
-        Player player = TestPlayer.getInstance();
-        PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin, "test:foo", listener1);
-        PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin, "test:baz", listener2);
-
-        assertTrue(registration1.isValid());
-        assertTrue(registration2.isValid());
-        messenger.dispatchIncomingMessage(player, "test:foo", "test:bar".getBytes());
-        messenger.dispatchIncomingMessage(player, "test:baz", "test:qux".getBytes());
-        assertTrue(listener1.hasReceived());
-        assertTrue(listener2.hasReceived());
-
-        messenger.unregisterIncomingPluginChannel(plugin, "test:foo");
-        listener1.reset();
-        listener2.reset();
-
-        assertFalse(registration1.isValid());
-        assertTrue(registration2.isValid());
-        messenger.dispatchIncomingMessage(player, "test:foo", "test:bar".getBytes());
-        messenger.dispatchIncomingMessage(player, "test:baz", "test:qux".getBytes());
-        assertFalse(listener1.hasReceived());
-        assertTrue(listener2.hasReceived());
-    }
-
-    @Test
-    public void testUnregisterIncomingPluginChannel_Plugin() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-        TestMessageListener listener1 = new TestMessageListener("test:foo", "test:bar".getBytes());
-        TestMessageListener listener2 = new TestMessageListener("test:baz", "test:qux".getBytes());
-        Player player = TestPlayer.getInstance();
-        PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin, "test:foo", listener1);
-        PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin, "test:baz", listener2);
-
-        assertTrue(registration1.isValid());
-        assertTrue(registration2.isValid());
-        messenger.dispatchIncomingMessage(player, "test:foo", "test:bar".getBytes());
-        messenger.dispatchIncomingMessage(player, "test:baz", "test:qux".getBytes());
-        assertTrue(listener1.hasReceived());
-        assertTrue(listener2.hasReceived());
-
-        messenger.unregisterIncomingPluginChannel(plugin);
-        listener1.reset();
-        listener2.reset();
-
-        assertFalse(registration1.isValid());
-        assertFalse(registration2.isValid());
-        messenger.dispatchIncomingMessage(player, "test:foo", "test:bar".getBytes());
-        messenger.dispatchIncomingMessage(player, "test:baz", "test:qux".getBytes());
-        assertFalse(listener1.hasReceived());
-        assertFalse(listener2.hasReceived());
-    }
-
-    @Test
-    public void testGetOutgoingChannels() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
-
-        assertEquals(messenger.getOutgoingChannels());
-
-        messenger.registerOutgoingPluginChannel(plugin1, "test:foo");
-        messenger.registerOutgoingPluginChannel(plugin1, "test:bar");
-        messenger.registerOutgoingPluginChannel(plugin2, "test:baz");
-        messenger.registerOutgoingPluginChannel(plugin2, "test:baz");
-
-        assertEquals(messenger.getOutgoingChannels(), "test:foo", "test:bar", "test:baz");
-    }
-
-    @Test
-    public void testGetOutgoingChannels_Plugin() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
-        TestPlugin plugin3 = getPlugin();
-
-        messenger.registerOutgoingPluginChannel(plugin1, "test:foo");
-        messenger.registerOutgoingPluginChannel(plugin1, "test:bar");
-        messenger.registerOutgoingPluginChannel(plugin2, "test:baz");
-        messenger.registerOutgoingPluginChannel(plugin2, "test:qux");
-
-        assertEquals(messenger.getOutgoingChannels(plugin1), "test:foo", "test:bar");
-        assertEquals(messenger.getOutgoingChannels(plugin2), "test:baz", "test:qux");
-        assertEquals(messenger.getOutgoingChannels(plugin3));
-    }
-
-    @Test
-    public void testGetIncomingChannels() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
-
-        assertEquals(messenger.getIncomingChannels());
-
-        messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
-
-        assertEquals(messenger.getIncomingChannels(), "test:foo", "test:bar", "test:baz");
-    }
-
-    @Test
-    public void testGetIncomingChannels_Plugin() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
-        TestPlugin plugin3 = getPlugin();
-
-        messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        messenger.registerIncomingPluginChannel(plugin2, "test:qux", new TestMessageListener("test:foo", "test:bar".getBytes()));
-
-        assertEquals(messenger.getIncomingChannels(plugin1), "test:foo", "test:bar");
-        assertEquals(messenger.getIncomingChannels(plugin2), "test:baz", "test:qux");
-        assertEquals(messenger.getIncomingChannels(plugin3));
-    }
-
-    @Test
-    public void testGetIncomingChannelRegistrations_Plugin() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
-        TestPlugin plugin3 = getPlugin();
-        PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration3 = messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration4 = messenger.registerIncomingPluginChannel(plugin2, "test:qux", new TestMessageListener("test:foo", "test:bar".getBytes()));
-
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin1), registration1, registration2);
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin2), registration3, registration4);
-        assertEquals(messenger.getIncomingChannels(plugin3));
-    }
-
-    @Test
-    public void testGetIncomingChannelRegistrations_String() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
-        PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration3 = messenger.registerIncomingPluginChannel(plugin2, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration4 = messenger.registerIncomingPluginChannel(plugin2, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
-
-        assertEquals(messenger.getIncomingChannelRegistrations("test:foo"), registration1, registration3);
-        assertEquals(messenger.getIncomingChannelRegistrations("test:bar"), registration2, registration4);
-        assertEquals(messenger.getIncomingChannelRegistrations("test:baz"));
-    }
-
-    @Test
-    public void testGetIncomingChannelRegistrations_Plugin_String() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
-        TestPlugin plugin3 = getPlugin();
-        PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration3 = messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration4 = messenger.registerIncomingPluginChannel(plugin2, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration5 = messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration6 = messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
-
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin1, "test:foo"), registration1, registration2);
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin1, "test:bar"), registration3);
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin2, "test:bar"), registration4);
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin2, "test:baz"), registration5, registration6);
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin1, "test:baz"));
-        assertEquals(messenger.getIncomingChannelRegistrations(plugin3, "test:qux"));
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testInvalidChannel() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-
-        messenger.registerOutgoingPluginChannel(plugin, "foo");
-    }
-
-    @Test
-    public void testValidateAndCorrectChannel() {
-        Assert.assertEquals("bungeecord:main", StandardMessenger.validateAndCorrectChannel("BungeeCord"));
-        Assert.assertEquals("BungeeCord", StandardMessenger.validateAndCorrectChannel("bungeecord:main"));
-    }
-
-    private static <T> void assertEquals(Collection<T> actual, T... expected) {
-        assertThat("Size of the array", actual.size(), is(expected.length));
-        assertThat(actual, hasItems(expected));
-    }
-}
diff --git a/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java b/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java
deleted file mode 100644
index 7a5b6108..00000000
--- a/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package org.bukkit.plugin.messaging;
-
-import static org.junit.Assert.*;
-import org.bukkit.entity.Player;
-
-public class TestMessageListener implements PluginMessageListener {
-    private final String channel;
-    private final byte[] message;
-    private boolean received = false;
-
-    public TestMessageListener(String channel, byte[] message) {
-        this.channel = channel;
-        this.message = message;
-    }
-
-    @Override
-    public void onPluginMessageReceived(String channel, Player player, byte[] message) {
-        assertEquals(this.channel, channel);
-        assertArrayEquals(this.message, message);
-        this.received = true;
-    }
-
-    public boolean hasReceived() {
-        return received;
-    }
-
-    public void reset() {
-        received = false;
-    }
-}
diff --git a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
deleted file mode 100644
index 1b7642dc..00000000
--- a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package org.bukkit.plugin.messaging;
-
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationHandler;
-import java.lang.reflect.Method;
-import java.lang.reflect.Proxy;
-import java.util.HashMap;
-import org.bukkit.entity.Player;
-
-
-public final class TestPlayer implements InvocationHandler {
-    private static interface MethodHandler {
-        Object handle(TestPlayer server, Object[] args);
-    }
-    private static final Constructor<? extends Player> constructor;
-    private static final HashMap<Method, MethodHandler> methods = new HashMap<Method, MethodHandler>();
-    static {
-        try {
-            /*
-            methods.put(Player.class.getMethod("methodName"),
-                new MethodHandler() {
-                    public Object handle(TestPlayer server, Object[] args) {
-                    }
-                });
-            */
-            constructor = Proxy.getProxyClass(Player.class.getClassLoader(), Player.class).asSubclass(Player.class).getConstructor(InvocationHandler.class);
-        } catch (Throwable t) {
-            throw new Error(t);
-        }
-    }
-
-    private TestPlayer() {};
-
-    public static Player getInstance() {
-        try {
-            return constructor.newInstance(new TestPlayer());
-        } catch (Throwable t) {
-            throw new RuntimeException(t);
-        }
-    }
-
-    @Override
-    public Object invoke(Object proxy, Method method, Object[] args) {
-        MethodHandler handler = methods.get(method);
-        if (handler != null) {
-            return handler.handle(this, args);
-        }
-        throw new UnsupportedOperationException(String.valueOf(method));
-    }
-}
diff --git a/src/test/java/org/bukkit/util/BoundingBoxTest.java b/src/test/java/org/bukkit/util/BoundingBoxTest.java
deleted file mode 100644
index 2d50a9ed..00000000
--- a/src/test/java/org/bukkit/util/BoundingBoxTest.java
+++ /dev/null
@@ -1,204 +0,0 @@
-package org.bukkit.util;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.util.Map;
-import org.bukkit.Location;
-import org.bukkit.block.BlockFace;
-import org.junit.Test;
-
-public class BoundingBoxTest {
-
-    private static final double delta = 1.0 / 1000000;
-
-    @Test
-    public void testConstruction() {
-        BoundingBox expected = new BoundingBox(-1, -1, -1, 1, 2, 3);
-        assertThat(expected.getMin(), is(new Vector(-1, -1, -1)));
-        assertThat(expected.getMax(), is(new Vector(1, 2, 3)));
-        assertThat(expected.getCenter(), is(new Vector(0.0D, 0.5D, 1.0D)));
-        assertThat(expected.getWidthX(), is(2.0D));
-        assertThat(expected.getHeight(), is(3.0D));
-        assertThat(expected.getWidthZ(), is(4.0D));
-        assertThat(expected.getVolume(), is(24.0D));
-
-        assertThat(BoundingBox.of(new Vector(-1, -1, -1), new Vector(1, 2, 3)), is(expected));
-        assertThat(BoundingBox.of(new Vector(1, 2, 3), new Vector(-1, -1, -1)), is(expected));
-        assertThat(BoundingBox.of(new Location(null, -1, -1, -1), new Location(null, 1, 2, 3)), is(expected));
-        assertThat(BoundingBox.of(new Vector(0.0D, 0.5D, 1.0D), 1.0D, 1.5D, 2.0D), is(expected));
-        assertThat(BoundingBox.of(new Location(null, 0.0D, 0.5D, 1.0D), 1.0D, 1.5D, 2.0D), is(expected));
-    }
-
-    @Test
-    public void testContains() {
-        BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 2, 3);
-        assertThat(aabb.contains(-0.5D, 0.0D, 0.5D), is(true));
-        assertThat(aabb.contains(-1.0D, -1.0D, -1.0D), is(true));
-        assertThat(aabb.contains(1.0D, 2.0D, 3.0D), is(false));
-        assertThat(aabb.contains(-1.0D, 1.0D, 4.0D), is(false));
-        assertThat(aabb.contains(new Vector(-0.5D, 0.0D, 0.5D)), is(true));
-
-        assertThat(aabb.contains(new BoundingBox(-0.5D, -0.5D, -0.5D, 0.5D, 1.0D, 2.0D)), is(true));
-        assertThat(aabb.contains(aabb), is(true));
-        assertThat(aabb.contains(new BoundingBox(-1, -1, -1, 1, 1, 3)), is(true));
-        assertThat(aabb.contains(new BoundingBox(-2, -1, -1, 1, 2, 3)), is(false));
-        assertThat(aabb.contains(new Vector(-0.5D, -0.5D, -0.5D), new Vector(0.5D, 1.0D, 2.0D)), is(true));
-    }
-
-    @Test
-    public void testOverlaps() {
-        BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 2, 3);
-        assertThat(aabb.contains(aabb), is(true));
-        assertThat(aabb.overlaps(new BoundingBox(-2, -2, -2, 0, 0, 0)), is(true));
-        assertThat(aabb.overlaps(new BoundingBox(0.5D, 1.5D, 2.5D, 1, 2, 3)), is(true));
-        assertThat(aabb.overlaps(new BoundingBox(0.5D, 1.5D, 2.5D, 2, 3, 4)), is(true));
-        assertThat(aabb.overlaps(new BoundingBox(-2, -2, -2, -1, -1, -1)), is(false));
-        assertThat(aabb.overlaps(new BoundingBox(1, 2, 3, 2, 3, 4)), is(false));
-        assertThat(aabb.overlaps(new Vector(0.5D, 1.5D, 2.5D), new Vector(1, 2, 3)), is(true));
-    }
-
-    @Test
-    public void testDegenerate() {
-        BoundingBox aabb = new BoundingBox(0, 0, 0, 0, 0, 0);
-        assertThat(aabb.getWidthX(), is(0.0D));
-        assertThat(aabb.getHeight(), is(0.0D));
-        assertThat(aabb.getWidthZ(), is(0.0D));
-        assertThat(aabb.getVolume(), is(0.0D));
-    }
-
-    @Test
-    public void testShift() {
-        BoundingBox aabb = new BoundingBox(0, 0, 0, 1, 1, 1);
-        assertThat(aabb.clone().shift(1, 2, 3), is(new BoundingBox(1, 2, 3, 2, 3, 4)));
-        assertThat(aabb.clone().shift(-1, -2, -3), is(new BoundingBox(-1, -2, -3, 0, -1, -2)));
-        assertThat(aabb.clone().shift(new Vector(1, 2, 3)), is(new BoundingBox(1, 2, 3, 2, 3, 4)));
-        assertThat(aabb.clone().shift(new Location(null, 1, 2, 3)), is(new BoundingBox(1, 2, 3, 2, 3, 4)));
-    }
-
-    @Test
-    public void testUnion() {
-        BoundingBox aabb1 = new BoundingBox(0, 0, 0, 1, 1, 1);
-        assertThat(aabb1.clone().union(new BoundingBox(-2, -2, -2, -1, -1, -1)), is(new BoundingBox(-2, -2, -2, 1, 1, 1)));
-        assertThat(aabb1.clone().union(1, 2, 3), is(new BoundingBox(0, 0, 0, 1, 2, 3)));
-        assertThat(aabb1.clone().union(new Vector(1, 2, 3)), is(new BoundingBox(0, 0, 0, 1, 2, 3)));
-        assertThat(aabb1.clone().union(new Location(null, 1, 2, 3)), is(new BoundingBox(0, 0, 0, 1, 2, 3)));
-    }
-
-    @Test
-    public void testIntersection() {
-        BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 2, 3);
-        assertThat(aabb.clone().intersection(new BoundingBox(-2, -2, -2, 4, 4, 4)), is(aabb));
-        assertThat(aabb.clone().intersection(new BoundingBox(-2, -2, -2, 1, 1, 1)), is(new BoundingBox(-1, -1, -1, 1, 1, 1)));
-    }
-
-    @Test
-    public void testExpansion() {
-        BoundingBox aabb = new BoundingBox(0, 0, 0, 2, 2, 2);
-        assertThat(aabb.clone().expand(1, 2, 3, 1, 2, 3), is(new BoundingBox(-1, -2, -3, 3, 4, 5)));
-        assertThat(aabb.clone().expand(-1, -2, -3, 1, 2, 3), is(new BoundingBox(1, 2, 3, 3, 4, 5)));
-        assertThat(aabb.clone().expand(1, 2, 3, -1, -2, -3), is(new BoundingBox(-1, -2, -3, 1, 0, -1)));
-        assertThat(aabb.clone().expand(-1, -2, -3, -0.5D, -0.5, -3), is(new BoundingBox(1, 1.5D, 1, 1.5D, 1.5D, 1)));
-
-        assertThat(aabb.clone().expand(1, 2, 3), is(new BoundingBox(-1, -2, -3, 3, 4, 5)));
-        assertThat(aabb.clone().expand(-0.1, -0.5, -2), is(new BoundingBox(0.1D, 0.5D, 1, 1.9D, 1.5D, 1)));
-        assertThat(aabb.clone().expand(new Vector(1, 2, 3)), is(new BoundingBox(-1, -2, -3, 3, 4, 5)));
-
-        assertThat(aabb.clone().expand(1), is(new BoundingBox(-1, -1, -1, 3, 3, 3)));
-        assertThat(aabb.clone().expand(-0.5D), is(new BoundingBox(0.5D, 0.5D, 0.5D, 1.5D, 1.5D, 1.5D)));
-
-        assertThat(aabb.clone().expand(1, 0, 0, 0.5D), is(new BoundingBox(0, 0, 0, 2.5D, 2, 2)));
-        assertThat(aabb.clone().expand(1, 0, 0, -0.5D), is(new BoundingBox(0, 0, 0, 1.5D, 2, 2)));
-        assertThat(aabb.clone().expand(-1, 0, 0, 0.5D), is(new BoundingBox(-0.5D, 0, 0, 2, 2, 2)));
-        assertThat(aabb.clone().expand(-1, 0, 0, -0.5D), is(new BoundingBox(0.5D, 0, 0, 2, 2, 2)));
-
-        assertThat(aabb.clone().expand(0, 1, 0, 0.5D), is(new BoundingBox(0, 0, 0, 2, 2.5D, 2)));
-        assertThat(aabb.clone().expand(0, 1, 0, -0.5D), is(new BoundingBox(0, 0, 0, 2, 1.5D, 2)));
-        assertThat(aabb.clone().expand(0, -1, 0, 0.5D), is(new BoundingBox(0, -0.5D, 0, 2, 2, 2)));
-        assertThat(aabb.clone().expand(0, -1, 0, -0.5D), is(new BoundingBox(0, 0.5D, 0, 2, 2, 2)));
-
-        assertThat(aabb.clone().expand(0, 0, 1, 0.5D), is(new BoundingBox(0, 0, 0, 2, 2, 2.5D)));
-        assertThat(aabb.clone().expand(0, 0, 1, -0.5D), is(new BoundingBox(0, 0, 0, 2, 2, 1.5D)));
-        assertThat(aabb.clone().expand(0, 0, -1, 0.5D), is(new BoundingBox(0, 0, -0.5D, 2, 2, 2)));
-        assertThat(aabb.clone().expand(0, 0, -1, -0.5D), is(new BoundingBox(0, 0, 0.5D, 2, 2, 2)));
-
-        assertThat(aabb.clone().expand(new Vector(1, 0, 0), 0.5D), is(new BoundingBox(0, 0, 0, 2.5D, 2, 2)));
-        assertThat(aabb.clone().expand(BlockFace.EAST, 0.5D), is(new BoundingBox(0, 0, 0, 2.5D, 2, 2)));
-        assertThat(aabb.clone().expand(BlockFace.NORTH_NORTH_WEST, 1.0D), is(aabb.clone().expand(BlockFace.NORTH_NORTH_WEST.getDirection(), 1.0D)));
-        assertThat(aabb.clone().expand(BlockFace.SELF, 1.0D), is(aabb));
-
-        BoundingBox expanded = aabb.clone().expand(BlockFace.NORTH_WEST, 1.0D);
-        assertThat(expanded.getWidthX(), is(closeTo(aabb.getWidthX() + Math.sqrt(0.5D), delta)));
-        assertThat(expanded.getWidthZ(), is(closeTo(aabb.getWidthZ() + Math.sqrt(0.5D), delta)));
-        assertThat(expanded.getHeight(), is(aabb.getHeight()));
-
-        assertThat(aabb.clone().expandDirectional(1, 2, 3), is(new BoundingBox(0, 0, 0, 3, 4, 5)));
-        assertThat(aabb.clone().expandDirectional(-1, -2, -3), is(new BoundingBox(-1, -2, -3, 2, 2, 2)));
-        assertThat(aabb.clone().expandDirectional(new Vector(1, 2, 3)), is(new BoundingBox(0, 0, 0, 3, 4, 5)));
-    }
-
-    @Test
-    public void testRayTrace() {
-        BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 1, 1);
-
-        assertThat(aabb.rayTrace(new Vector(-2, 0, 0), new Vector(1, 0, 0), 10),
-                is(new RayTraceResult(new Vector(-1, 0, 0), BlockFace.WEST)));
-        assertThat(aabb.rayTrace(new Vector(2, 0, 0), new Vector(-1, 0, 0), 10),
-                is(new RayTraceResult(new Vector(1, 0, 0), BlockFace.EAST)));
-
-        assertThat(aabb.rayTrace(new Vector(0, -2, 0), new Vector(0, 1, 0), 10),
-                is(new RayTraceResult(new Vector(0, -1, 0), BlockFace.DOWN)));
-        assertThat(aabb.rayTrace(new Vector(0, 2, 0), new Vector(0, -1, 0), 10),
-                is(new RayTraceResult(new Vector(0, 1, 0), BlockFace.UP)));
-
-        assertThat(aabb.rayTrace(new Vector(0, 0, -2), new Vector(0, 0, 1), 10),
-                is(new RayTraceResult(new Vector(0, 0, -1), BlockFace.NORTH)));
-        assertThat(aabb.rayTrace(new Vector(0, 0, 2), new Vector(0, 0, -1), 10),
-                is(new RayTraceResult(new Vector(0, 0, 1), BlockFace.SOUTH)));
-
-        assertThat(aabb.rayTrace(new Vector(0, 0, 0), new Vector(1, 0, 0), 10),
-                is(new RayTraceResult(new Vector(1, 0, 0), BlockFace.EAST)));
-        assertThat(aabb.rayTrace(new Vector(0, 0, 0), new Vector(-1, 0, 0), 10),
-                is(new RayTraceResult(new Vector(-1, 0, 0), BlockFace.WEST)));
-
-        assertThat(aabb.rayTrace(new Vector(0, 0, 0), new Vector(0, 1, 0), 10),
-                is(new RayTraceResult(new Vector(0, 1, 0), BlockFace.UP)));
-        assertThat(aabb.rayTrace(new Vector(0, 0, 0), new Vector(0, -1, 0), 10),
-                is(new RayTraceResult(new Vector(0, -1, 0), BlockFace.DOWN)));
-
-        assertThat(aabb.rayTrace(new Vector(0, 0, 0), new Vector(0, 0, 1), 10),
-                is(new RayTraceResult(new Vector(0, 0, 1), BlockFace.SOUTH)));
-        assertThat(aabb.rayTrace(new Vector(0, 0, 0), new Vector(0, 0, -1), 10),
-                is(new RayTraceResult(new Vector(0, 0, -1), BlockFace.NORTH)));
-
-        assertThat(aabb.rayTrace(new Vector(-2, -2, -2), new Vector(1, 0, 0), 10), is(nullValue()));
-        assertThat(aabb.rayTrace(new Vector(-2, -2, -2), new Vector(0, 1, 0), 10), is(nullValue()));
-        assertThat(aabb.rayTrace(new Vector(-2, -2, -2), new Vector(0, 0, 1), 10), is(nullValue()));
-
-        assertThat(aabb.rayTrace(new Vector(0, 0, -3), new Vector(1, 0, 1), 10), is(nullValue()));
-        assertThat(aabb.rayTrace(new Vector(0, 0, -2), new Vector(1, 0, 2), 10),
-                is(new RayTraceResult(new Vector(0.5D, 0, -1), BlockFace.NORTH)));
-
-        // corner/edge hits yield unspecified block face:
-        assertThat(aabb.rayTrace(new Vector(2, 2, 2), new Vector(-1, -1, -1), 10),
-                anyOf(is(new RayTraceResult(new Vector(1, 1, 1), BlockFace.EAST)),
-                        is(new RayTraceResult(new Vector(1, 1, 1), BlockFace.UP)),
-                        is(new RayTraceResult(new Vector(1, 1, 1), BlockFace.SOUTH))));
-
-        assertThat(aabb.rayTrace(new Vector(-2, -2, -2), new Vector(1, 1, 1), 10),
-                anyOf(is(new RayTraceResult(new Vector(-1, -1, -1), BlockFace.WEST)),
-                        is(new RayTraceResult(new Vector(-1, -1, -1), BlockFace.DOWN)),
-                        is(new RayTraceResult(new Vector(-1, -1, -1), BlockFace.NORTH))));
-
-        assertThat(aabb.rayTrace(new Vector(0, 0, -2), new Vector(1, 0, 1), 10),
-                anyOf(is(new RayTraceResult(new Vector(1, 0, -1), BlockFace.NORTH)),
-                        is(new RayTraceResult(new Vector(1, 0, -1), BlockFace.EAST))));
-    }
-
-    @Test
-    public void testSerialization() {
-        BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 1, 1);
-        Map<String, Object> serialized = aabb.serialize();
-        BoundingBox deserialized = BoundingBox.deserialize(serialized);
-        assertThat(deserialized, is(aabb));
-    }
-}
diff --git a/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java b/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
deleted file mode 100644
index 5dc9bf8c..00000000
--- a/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package org.bukkit.util;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.ImmutableList;
-import java.util.List;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
-public class StringUtilStartsWithTest {
-
-    @Parameters(name= "{index}: {0} startsWith {1} == {2}")
-    public static List<Object[]> data() {
-        return ImmutableList.<Object[]>of(
-            new Object[] {
-                "Apple",
-                "Apples",
-                false
-            },
-            new Object[] {
-                "Apples",
-                "Apple",
-                true
-            },
-            new Object[] {
-                "Apple",
-                "Apple",
-                true
-            },
-            new Object[] {
-                "Apple",
-                "apples",
-                false
-            },
-            new Object[] {
-                "apple",
-                "Apples",
-                false
-            },
-            new Object[] {
-                "apple",
-                "apples",
-                false
-            },
-            new Object[] {
-                "Apples",
-                "apPL",
-                true
-            },
-            new Object[] {
-                "123456789",
-                "1234567",
-                true
-            },
-            new Object[] {
-                "",
-                "",
-                true
-            },
-            new Object[] {
-                "string",
-                "",
-                true
-            }
-        );
-    }
-
-    @Parameter(0)
-    public String base;
-    @Parameter(1)
-    public String prefix;
-    @Parameter(2)
-    public boolean result;
-
-    @Test
-    public void testFor() {
-        assertThat(base + " starts with " + prefix + ": " + result, StringUtil.startsWithIgnoreCase(base, prefix), is(result));
-    }
-}
diff --git a/src/test/java/org/bukkit/util/StringUtilTest.java b/src/test/java/org/bukkit/util/StringUtilTest.java
deleted file mode 100644
index 326d0b2f..00000000
--- a/src/test/java/org/bukkit/util/StringUtilTest.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package org.bukkit.util;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.ImmutableList;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import org.junit.Test;
-
-public class StringUtilTest {
-
-    @Test(expected=NullPointerException.class)
-    public void nullPrefixTest() {
-        StringUtil.startsWithIgnoreCase("String", null);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void nullStringTest() {
-        StringUtil.startsWithIgnoreCase(null, "String");
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void nullCollectionTest() {
-        StringUtil.copyPartialMatches("Token", ImmutableList.<String>of(), null);
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void nullIterableTest() {
-        StringUtil.copyPartialMatches("Token", null, new ArrayList<String>());
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void nullTokenTest() {
-        StringUtil.copyPartialMatches(null, ImmutableList.<String>of(), new ArrayList<String>());
-    }
-
-    @Test
-    public void copyTokenTest() {
-        String token = "ab";
-        Iterable<String> original = ImmutableList.of("ab12", "aC561", "AB5195", "Ab76", "", "a");
-        List<String> expected =     ImmutableList.of("ab12",          "AB5195", "Ab76"         );
-        List<String> list = new ArrayList<String>();
-        assertThat(StringUtil.copyPartialMatches(token, original, list), is(expected));
-        assertThat(StringUtil.copyPartialMatches(token, original, list), is(sameInstance(list)));
-        assertThat(list.size(), is(expected.size() * 2));
-    }
-
-    @Test(expected=UnsupportedOperationException.class)
-    public void copyUnsupportedTest() {
-        StringUtil.copyPartialMatches("token", ImmutableList.of("token1", "token2"), ImmutableList.of());
-    }
-
-    @Test(expected=IllegalArgumentException.class)
-    public void copyNullTest() {
-        StringUtil.copyPartialMatches("token", Arrays.asList("token1", "token2", null), new ArrayList<String>());
-    }
-}
diff --git a/src/test/java/org/bukkit/util/VectorTest.java b/src/test/java/org/bukkit/util/VectorTest.java
deleted file mode 100644
index 9b846deb..00000000
--- a/src/test/java/org/bukkit/util/VectorTest.java
+++ /dev/null
@@ -1,125 +0,0 @@
-package org.bukkit.util;
-
-import static org.junit.Assert.*;
-import org.bukkit.block.BlockFace;
-import org.junit.Test;
-
-public class VectorTest {
-
-    @Test
-    public void testNormalisedVectors() {
-        assertFalse(new Vector(1, 0, 0).multiply(1.1).isNormalized());
-
-        assertTrue(new Vector(1, 1, 1).normalize().isNormalized());
-        assertTrue(new Vector(1, 0, 0).isNormalized());
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testNullVectorAxis() {
-        new Vector(0, 1, 0).rotateAroundAxis(null, Math.PI);
-    }
-
-    @Test
-    public void testBypassingAxisVector() {
-        new Vector(0, 1, 0).rotateAroundNonUnitAxis(new Vector(1, 1, 1), Math.PI); // This will result some weird result, but there may be some use for it for some people
-    }
-
-    @Test
-    public void testResizeAxis() {
-        Vector axis = new Vector(0, 10, 0);
-        assertEquals(BlockFace.EAST.getDirection().rotateAroundAxis(axis, Math.PI * 0.5), BlockFace.NORTH.getDirection());
-    }
-
-    /**
-     * As west to east are the x axis in Minecraft, rotating around it from up
-     * should lead to up -> south -> down -> north.
-     */
-    @Test
-    public void testRotationAroundX() {
-        Vector vector = BlockFace.UP.getDirection();
-        assertEquals(BlockFace.SOUTH.getDirection(), vector.clone().rotateAroundX(Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
-        assertEquals(BlockFace.DOWN.getDirection(), vector.clone().rotateAroundX(Math.PI * 1.0)); // Should rotate around x axis for 2/4 of a circle.
-        assertEquals(BlockFace.NORTH.getDirection(), vector.clone().rotateAroundX(Math.PI * 1.5)); // Should rotate around x axis for 3/4 of a circle.
-        assertEquals(BlockFace.UP.getDirection(), vector.clone().rotateAroundX(Math.PI * 2.0)); // Should rotate around x axis for 4/4 of a circle.
-    }
-
-    /**
-     * As up to down are the y axis in Minecraft, rotating around it from up
-     * should lead to east (positive x) -> south -> west -> north.
-     */
-    @Test
-    public void testRotationAroundY() {
-        Vector vector = BlockFace.EAST.getDirection();
-        assertEquals(BlockFace.NORTH.getDirection(), vector.clone().rotateAroundY(Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
-        assertEquals(BlockFace.WEST.getDirection(), vector.clone().rotateAroundY(Math.PI * 1.0)); // Should rotate around x axis for 2/4 of a circle.
-        assertEquals(BlockFace.SOUTH.getDirection(), vector.clone().rotateAroundY(Math.PI * 1.5)); // Should rotate around x axis for 3/4 of a circle.
-        assertEquals(BlockFace.EAST.getDirection(), vector.clone().rotateAroundY(Math.PI * 2.0)); // Should rotate around x axis for 4/4 of a circle.
-    }
-
-    /**
-     * As up to down are the y axis in Minecraft, rotating around it from up
-     * should lead to east (positive x) -> south -> west -> north.
-     */
-    @Test
-    public void testRotationAroundYUsingCustomAxis() {
-        Vector vector = BlockFace.EAST.getDirection();
-        Vector axis = BlockFace.UP.getDirection();
-        assertEquals(BlockFace.NORTH.getDirection(), vector.clone().rotateAroundAxis(axis, Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
-        assertEquals(BlockFace.WEST.getDirection(), vector.clone().rotateAroundAxis(axis, Math.PI * 1.0)); // Should rotate around x axis for 2/4 of a circle.
-        assertEquals(BlockFace.SOUTH.getDirection(), vector.clone().rotateAroundAxis(axis, Math.PI * 1.5)); // Should rotate around x axis for 3/4 of a circle.
-        assertEquals(BlockFace.EAST.getDirection(), vector.clone().rotateAroundAxis(axis, Math.PI * 2.0)); // Should rotate around x axis for 4/4 of a circle.
-    }
-
-    /**
-     * As south to north are the z axis in Minecraft, rotating around it from up
-     * should lead to up (positive y) -> west -> down -> east.
-     */
-    @Test
-    public void testRotationAroundZ() {
-        Vector vector = BlockFace.UP.getDirection();
-        assertEquals(BlockFace.WEST.getDirection(), vector.clone().rotateAroundZ(Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
-        assertEquals(BlockFace.DOWN.getDirection(), vector.clone().rotateAroundZ(Math.PI * 1.0)); // Should rotate around x axis for 2/4 of a circle.
-        assertEquals(BlockFace.EAST.getDirection(), vector.clone().rotateAroundZ(Math.PI * 1.5)); // Should rotate around x axis for 3/4 of a circle.
-        assertEquals(BlockFace.UP.getDirection(), vector.clone().rotateAroundZ(Math.PI * 2.0)); // Should rotate around x axis for 4/4 of a circle.
-    }
-
-    @Test
-    public void testRotationAroundAxis() {
-        Vector axis = new Vector(1, 0, 1);
-        assertEquals(new Vector(0, 1, 0).rotateAroundNonUnitAxis(axis, Math.PI * 0.5), new Vector(-1, 0, 1));
-    }
-
-    @Test
-    public void testRotationAroundAxisNonUnit() {
-        Vector axis = new Vector(0, 2, 0);
-        Vector v = BlockFace.EAST.getDirection();
-
-        assertEquals(v.rotateAroundNonUnitAxis(axis, Math.PI * 0.5), BlockFace.NORTH.getDirection().multiply(2));
-    }
-
-    /**
-     * This will be a bit tricky to prove so we will try to simply see if the
-     * vectors have correct angle to each other This will work with any two
-     * vectors, as the rotation will keep the angle the same.
-     */
-    @Test
-    public void testRotationAroundCustomAngle() {
-        Vector axis = new Vector(-30, 1, 2000).normalize();
-        Vector v = new Vector(53, 12, 98);
-
-        float a = v.angle(axis);
-        double stepSize = Math.PI / 21;
-        for (int i = 0; i < 42; i++) {
-            v.rotateAroundAxis(axis, stepSize);
-            assertEquals(a, v.angle(axis), Vector.getEpsilon());
-        }
-    }
-
-    @Test
-    public void testSmallAngle() {
-        Vector a = new Vector(-0.13154885489775203, 0.0, 0.12210868381700482);
-        Vector b = new Vector(-0.7329152226448059, -0.0, 0.6803199648857117);
-
-        assertTrue(Double.isFinite(a.angle(b)));
-    }
-}
diff --git a/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java b/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
deleted file mode 100644
index 1586056e..00000000
--- a/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
+++ /dev/null
@@ -1,170 +0,0 @@
-package org.bukkit.util.io;
-
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.ImmutableList;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.util.List;
-import org.bukkit.Color;
-import org.bukkit.FireworkEffect;
-import org.bukkit.FireworkEffect.Type;
-import org.bukkit.configuration.serialization.ConfigurationSerializable;
-import org.bukkit.util.Vector;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
-
-@RunWith(Parameterized.class)
-public class BukkitObjectStreamTest {
-
-    @Parameters(name= "{index}: {0}")
-    public static List<Object[]> data() {
-        return ImmutableList.<Object[]>of(
-            new Object[] {
-                Color.class.getName(),
-                "rO0ABXNyADZjb20uZ29vZ2xlLmNvbW1vbi5jb2xsZWN0LkltbXV0YWJsZUxpc3QkU2VyaWFsaXplZEZvcm0AAAAAAAAAAAIAAVsACGVsZW1lbnRzdAATW0xqYXZhL2xhbmcvT2JqZWN0O3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAABXNyABpvcmcuYnVra2l0LnV0aWwuaW8uV3JhcHBlcvJQR+zxEm8FAgABTAADbWFwdAAPTGphdmEvdXRpbC9NYXA7eHBzcgA1Y29tLmdvb2dsZS5jb21tb24uY29sbGVjdC5JbW11dGFibGVNYXAkU2VyaWFsaXplZEZvcm0AAAAAAAAAAAIAAlsABGtleXNxAH4AAVsABnZhbHVlc3EAfgABeHB1cQB+AAMAAAAEdAACPT10AANSRUR0AARCTFVFdAAFR1JFRU51cQB+AAMAAAAEdAAFQ29sb3JzcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAA/3NxAH4AEQAAAP9zcQB+ABEAAAD/c3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+AAxxAH4ADXEAfgAOdXEAfgADAAAABHEAfgAQc3EAfgARAAAAAHNxAH4AEQAAAIBzcQB+ABEAAACAc3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+AAxxAH4ADXEAfgAOdXEAfgADAAAABHEAfgAQc3EAfgARAAAAgHNxAH4AEQAAAIBxAH4AGnNxAH4ABXNxAH4ACHVxAH4AAwAAAARxAH4AC3EAfgAMcQB+AA1xAH4ADnVxAH4AAwAAAARxAH4AEHNxAH4AEQAAAP9xAH4AGnEAfgAac3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+AAxxAH4ADXEAfgAOdXEAfgADAAAABHEAfgAQc3EAfgARAAAA/3EAfgAac3EAfgARAAAApQ==",
-                ImmutableList.of(
-                    Color.WHITE,
-                    Color.TEAL,
-                    Color.PURPLE,
-                    Color.RED,
-                    Color.ORANGE
-                    )
-            },
-            new Object[] {
-                FireworkEffect.class.getName(),
-                "rO0ABXNyADZjb20uZ29vZ2xlLmNvbW1vbi5jb2xsZWN0LkltbXV0YWJsZUxpc3QkU2VyaWFsaXplZEZvcm0AAAAAAAAAAAIAAVsACGVsZW1lbnRzdAATW0xqYXZhL2xhbmcvT2JqZWN0O3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAA3NyABpvcmcuYnVra2l0LnV0aWwuaW8uV3JhcHBlcvJQR+zxEm8FAgABTAADbWFwdAAPTGphdmEvdXRpbC9NYXA7eHBzcgA1Y29tLmdvb2dsZS5jb21tb24uY29sbGVjdC5JbW11dGFibGVNYXAkU2VyaWFsaXplZEZvcm0AAAAAAAAAAAIAAlsABGtleXNxAH4AAVsABnZhbHVlc3EAfgABeHB1cQB+AAMAAAAGdAACPT10AAdmbGlja2VydAAFdHJhaWx0AAZjb2xvcnN0AAtmYWRlLWNvbG9yc3QABHR5cGV1cQB+AAMAAAAGdAAIRmlyZXdvcmtzcgARamF2YS5sYW5nLkJvb2xlYW7NIHKA1Zz67gIAAVoABXZhbHVleHABc3EAfgATAHNxAH4AAHVxAH4AAwAAAAJzcQB+AAVzcQB+AAh1cQB+AAMAAAAEcQB+AAt0AANSRUR0AARCTFVFdAAFR1JFRU51cQB+AAMAAAAEdAAFQ29sb3JzcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAAAHEAfgAicQB+ACJzcQB+AAVzcQB+AAh1cQB+AAMAAAAEcQB+AAtxAH4AG3EAfgAccQB+AB11cQB+AAMAAAAEcQB+AB9zcQB+ACAAAADAc3EAfgAgAAAAwHNxAH4AIAAAAMBzcQB+AAB1cQB+AAMAAAABc3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+ABtxAH4AHHEAfgAddXEAfgADAAAABHEAfgAfc3EAfgAgAAAA/3NxAH4AIAAAAP9zcQB+ACAAAAD/dAAKQkFMTF9MQVJHRXNxAH4ABXNxAH4ACHVxAH4AAwAAAAZxAH4AC3EAfgAMcQB+AA1xAH4ADnEAfgAPcQB+ABB1cQB+AAMAAAAGcQB+ABJxAH4AFXEAfgAVc3EAfgAAdXEAfgADAAAAAXNxAH4ABXNxAH4ACHVxAH4AAwAAAARxAH4AC3EAfgAbcQB+ABxxAH4AHXVxAH4AAwAAAARxAH4AH3EAfgAic3EAfgAgAAAAgHEAfgAic3EAfgAAdXEAfgADAAAAAHQABEJBTExzcQB+AAVzcQB+AAh1cQB+AAMAAAAGcQB+AAtxAH4ADHEAfgANcQB+AA5xAH4AD3EAfgAQdXEAfgADAAAABnEAfgAScQB+ABRxAH4AFHNxAH4AAHVxAH4AAwAAAAFzcQB+AAVzcQB+AAh1cQB+AAMAAAAEcQB+AAtxAH4AG3EAfgAccQB+AB11cQB+AAMAAAAEcQB+AB9zcQB+ACAAAACAcQB+ACJxAH4AInEAfgA/dAAHQ1JFRVBFUg==",
-                ImmutableList.of(
-                    FireworkEffect.builder()
-                        .withColor(Color.BLACK, Color.SILVER)
-                        .with(Type.BALL_LARGE)
-                        .withFade(Color.WHITE)
-                        .withFlicker()
-                        .build(),
-                    FireworkEffect.builder()
-                        .withColor(Color.NAVY)
-                        .build(),
-                    FireworkEffect.builder()
-                        .withColor(Color.MAROON)
-                        .withTrail()
-                        .withFlicker()
-                        .with(Type.CREEPER)
-                        .build()
-                    ),
-            },
-            new Object[] {
-                Vector.class.getName(),
-                "rO0ABXNyADZjb20uZ29vZ2xlLmNvbW1vbi5jb2xsZWN0LkltbXV0YWJsZUxpc3QkU2VyaWFsaXplZEZvcm0AAAAAAAAAAAIAAVsACGVsZW1lbnRzdAATW0xqYXZhL2xhbmcvT2JqZWN0O3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAABHNyABpvcmcuYnVra2l0LnV0aWwuaW8uV3JhcHBlcvJQR+zxEm8FAgABTAADbWFwdAAPTGphdmEvdXRpbC9NYXA7eHBzcgA1Y29tLmdvb2dsZS5jb21tb24uY29sbGVjdC5JbW11dGFibGVNYXAkU2VyaWFsaXplZEZvcm0AAAAAAAAAAAIAAlsABGtleXNxAH4AAVsABnZhbHVlc3EAfgABeHB1cQB+AAMAAAAEdAACPT10AAF4dAABeXQAAXp1cQB+AAMAAAAEdAAGVmVjdG9yc3IAEGphdmEubGFuZy5Eb3VibGWAs8JKKWv7BAIAAUQABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAAAAAAAABzcQB+ABEAAAAAAAAAAHNxAH4AEQAAAAAAAAAAc3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+AAxxAH4ADXEAfgAOdXEAfgADAAAABHEAfgAQc3EAfgARQIOFwo9cKPZzcQB+ABFAtCKcKPXCj3NxAH4AEUBzrpeNT987c3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+AAxxAH4ADXEAfgAOdXEAfgADAAAABHEAfgAQc3EAfgARwEQTMzMzMzNzcQB+ABFASYAAAAAAAHNxAH4AEcCjqG3UQTVUc3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+AAxxAH4ADXEAfgAOdXEAfgADAAAABHEAfgAQc3EAfgARQd/////AAABzcQB+ABHB4AAAAAAAAHNxAH4AEQAAAAAAAAAA",
-                ImmutableList.of(
-                    new Vector(0, 0, 0),
-                    new Vector(624.72, 5154.61, 314.912),
-                    new Vector(-40.15, 51, -2516.21451),
-                    new Vector(Integer.MAX_VALUE, Integer.MIN_VALUE, 0)
-                    )
-            });
-    }
-
-    @Parameter(0)
-    public String className;
-
-    @Parameter(1)
-    public String preEncoded;
-
-    @Parameter(2)
-    public List<ConfigurationSerializable> object;
-
-    @Test
-    public void checkSerlialization() throws Throwable {
-        // If this test fails, you may start your trek to debug by commenting the '@Ignore' on the next method
-        // (and of course, you would read those comments too)
-        final ByteArrayOutputStream out = new ByteArrayOutputStream();
-        ObjectOutputStream oos = null;
-        try {
-            oos = new BukkitObjectOutputStream(out);
-            oos.writeObject(object);
-        } finally {
-            if (oos != null) {
-                try {
-                    oos.close();
-                } catch (IOException e) {
-                }
-            }
-        }
-
-        final byte[] preEncodedArray = Base64Coder.decode(preEncoded);
-
-        final Object readBack;
-        final Object preEncoded;
-
-        ObjectInputStream ois = null;
-        ObjectInputStream preois = null;
-        try {
-            ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
-            ByteArrayInputStream preIn = new ByteArrayInputStream(preEncodedArray);
-            ois = new BukkitObjectInputStream(in);
-            preois = new BukkitObjectInputStream(preIn);
-
-            readBack = ois.readObject();
-            preEncoded = preois.readObject();
-        } finally {
-            if (ois != null) {
-                try {
-                    ois.close();
-                } catch (IOException ex) {
-                }
-            }
-            if (preois != null) {
-                try {
-                    preois.close();
-                } catch (IOException ex) {
-                }
-            }
-        }
-
-        assertThat(object, is(readBack));
-        assertThat(object, is(preEncoded));
-    }
-
-    @Ignore
-    @Test
-    public void preEncoded() throws Throwable {
-        // This test is placed in the case that a necessary change is made to change the encoding format
-        // Just remove the ignore (or run manually) and it'll give you the new pre-encoded values
-
-        // It really does not matter if the encoded array is different per system (hence why this test is set to not run),
-        // as long as all systems can deserialize it.
-
-        // The entire reason the pre-encoded string was added is to make a build (test) fail if someone accidentally makes it not backward-compatible
-
-        final ByteArrayOutputStream out = new ByteArrayOutputStream();
-        ObjectOutputStream oos = null;
-        try {
-            oos = new BukkitObjectOutputStream(out);
-            oos.writeObject(object);
-            oos.flush();
-        } finally {
-            if (oos != null) {
-                try {
-                    oos.close();
-                } catch (IOException e) {
-                }
-            }
-        }
-
-        final String string = new String(Base64Coder.encode(out.toByteArray()));
-        try {
-            assertThat(preEncoded, is(string));
-        } catch (Throwable t) {
-            System.out.println(className + ": \"" + string + "\"");
-            throw t;
-        }
-    }
-}
-- 
2.20.1

