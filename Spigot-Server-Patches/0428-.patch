From 22b1a9a22d3ba1d72d7bb9aee139f34105ced682 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Alexander=20S=C3=B6derberg?= <sauilitired@gmail.com>
Date: Tue, 15 Oct 2019 13:45:57 +0200
Subject: [PATCH] --


diff --git a/src/main/java/net/minecraft/server/BlockAccessAir.java b/src/main/java/net/minecraft/server/BlockAccessAir.java
index d7a68a1ef..743acacb6 100644
--- a/src/main/java/net/minecraft/server/BlockAccessAir.java
+++ b/src/main/java/net/minecraft/server/BlockAccessAir.java
@@ -31,6 +31,11 @@ public enum BlockAccessAir implements IBlockAccess {
         return Blocks.AIR.getBlockData();
     }
 
+    @Override
+    public IBlockData getType(BlockPosition position, EntityPlayer tickingPlayer) {
+        return Blocks.AIR.getBlockData();
+    }
+
     @Override
     public Fluid getFluid(BlockPosition blockposition) {
         return FluidTypes.EMPTY.i();
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 104cdeab1..6eccc877a 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -218,6 +218,15 @@ public class Chunk implements IChunkAccess {
         final long position = BlockPosition.a(x, y, z);
         entityPlayer.modifiedBlocks.remove(position);
     }
+    @Override
+    public IBlockData getType(BlockPosition position, EntityPlayer tickingPlayer) {
+        final PlayerBlockModification playerBlockModification = tickingPlayer.modifiedBlocks.get(position.asLong());
+        if (playerBlockModification != null) {
+            return playerBlockModification.getModifiedBlock();
+        } else {
+            return getBlockDataInternal(position.x, position.y, position.z);
+        }
+    }
     // Servett end
 
     // Paper start - Optimize getBlockData to reduce instructions
@@ -230,8 +239,7 @@ public class Chunk implements IChunkAccess {
         // Servett start - Allow for player modified blocks
         try {
             synchronized (world.tickingPlayerLock) {
-                if (world.tickingPlayer != null
-                    && world.tickingPlayer.modifiedBlocks != null) {
+                if (world.tickingPlayer != null) {
                     final PlayerBlockModification blockModification =
                         world.tickingPlayer.modifiedBlocks.get(BlockPosition.a(x, y, z));
                     if (blockModification != null) {
@@ -244,7 +252,10 @@ public class Chunk implements IChunkAccess {
             e.printStackTrace();
         }
         // Servett end
+        return getBlockDataInternal(x, y, z);
+    }
 
+    private IBlockData getBlockDataInternal(int x, int y, int z) {
         // Method body / logic copied from below
         final int i = y >> 4;
         if (y >= 0 && i < this.sections.length && this.sections[i] != null) {
@@ -350,7 +361,7 @@ public class Chunk implements IChunkAccess {
                 return null;
             }
 
-            chunksection = new ChunkSection(j >> 4 << 4, this, this.world, true); // Paper - Anti-Xray
+            chunksection = new ChunkSection(world, j >> 4 << 4, this, this.world, true); // Paper - Anti-Xray
             this.sections[j >> 4] = chunksection;
         }
 
diff --git a/src/main/java/net/minecraft/server/ChunkCache.java b/src/main/java/net/minecraft/server/ChunkCache.java
index beb50d206..291791ceb 100644
--- a/src/main/java/net/minecraft/server/ChunkCache.java
+++ b/src/main/java/net/minecraft/server/ChunkCache.java
@@ -143,12 +143,33 @@ public class ChunkCache implements IWorldReader {
     }
 
     @Override
-    public IBlockData getType(BlockPosition blockposition) {
+    public IBlockData getType(BlockPosition blockposition, EntityPlayer tickingPlayer) {
+        final Chunk.PlayerBlockModification playerBlockModification = tickingPlayer.modifiedBlocks.get(blockposition.asLong());
+        if (playerBlockModification != null) {
+            return playerBlockModification.getModifiedBlock();
+        }
         if (World.isOutsideWorld(blockposition)) {
             return Blocks.AIR.getBlockData();
         } else {
             IChunkAccess ichunkaccess = this.w(blockposition);
+            return ichunkaccess.getType(blockposition);
+        }
+    }
 
+    @Override
+    public IBlockData getType(BlockPosition blockposition) {
+        synchronized (e.tickingPlayerLock) {
+            if (e.tickingPlayer != null) {
+                final Chunk.PlayerBlockModification playerBlockModification = e.tickingPlayer.modifiedBlocks.get(blockposition.asLong());
+                if (playerBlockModification != null) {
+                    return playerBlockModification.getModifiedBlock();
+                }
+            }
+        }
+        if (World.isOutsideWorld(blockposition)) {
+            return Blocks.AIR.getBlockData();
+        } else {
+            IChunkAccess ichunkaccess = this.w(blockposition);
             return ichunkaccess.getType(blockposition);
         }
     }
diff --git a/src/main/java/net/minecraft/server/ChunkRegionLoader.java b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
index 98cc4efcf..3ec6ea095 100644
--- a/src/main/java/net/minecraft/server/ChunkRegionLoader.java
+++ b/src/main/java/net/minecraft/server/ChunkRegionLoader.java
@@ -99,7 +99,7 @@ public class ChunkRegionLoader {
             byte b0 = nbttagcompound2.getByte("Y");
 
             if (nbttagcompound2.hasKeyOfType("Palette", 9) && nbttagcompound2.hasKeyOfType("BlockStates", 12)) {
-                ChunkSection chunksection = new ChunkSection(b0 << 4, null, worldserver, false); // Paper - Anti-Xray
+                ChunkSection chunksection = new ChunkSection(worldserver, b0 << 4, null, worldserver, false); // Paper - Anti-Xray
 
                 chunksection.getBlocks().a(nbttagcompound2.getList("Palette", 10), nbttagcompound2.getLongArray("BlockStates"));
                 chunksection.recalcBlockCounts();
diff --git a/src/main/java/net/minecraft/server/ChunkSection.java b/src/main/java/net/minecraft/server/ChunkSection.java
index 584b3e639..50ebc79c8 100644
--- a/src/main/java/net/minecraft/server/ChunkSection.java
+++ b/src/main/java/net/minecraft/server/ChunkSection.java
@@ -10,22 +10,24 @@ public class ChunkSection {
     private short tickingBlockCount;
     private short e;
     final DataPaletteBlock<IBlockData> blockIds; // Paper - package
+    private final World world; // Servett
 
-    public ChunkSection(int i) {
+    public ChunkSection(World world, int i) {
         // Paper start - add parameters
-        this(i, (IChunkAccess)null, (IWorldReader)null, true);
+        this(world, i, (IChunkAccess)null, (IWorldReader)null, true);
     }
-    public ChunkSection(int i, IChunkAccess chunk, IWorldReader world, boolean initializeBlocks) {
-        this(i, (short) 0, (short) 0, (short) 0, chunk, world, initializeBlocks);
+    public ChunkSection(World worldObject, int i, IChunkAccess chunk, IWorldReader world, boolean initializeBlocks) {
+        this(worldObject, i, (short) 0, (short) 0, (short) 0, chunk, world, initializeBlocks);
         // Paper end
     }
 
-    public ChunkSection(int i, short short0, short short1, short short2) {
+    public ChunkSection(World worldObject, int i, short short0, short short1, short short2) {
         // Paper start - add parameters
-        this(i, short0, short1, short2, (IChunkAccess)null, (IWorldReader)null, true);
+        this(worldObject, i, short0, short1, short2, (IChunkAccess)null, (IWorldReader)null, true);
     }
-    public ChunkSection(int i, short short0, short short1, short short2, IChunkAccess chunk, IWorldReader world, boolean initializeBlocks) {
+    public ChunkSection(World worldObject, int i, short short0, short short1, short short2, IChunkAccess chunk, IWorldReader world, boolean initializeBlocks) {
         // Paper end
+        this.world = worldObject;
         this.yPos = i;
         this.nonEmptyBlockCount = short0;
         this.tickingBlockCount = short1;
@@ -34,6 +36,27 @@ public class ChunkSection {
     }
 
     public IBlockData getType(int i, int j, int k) {
+        if (world != null) {
+            synchronized (world.tickingPlayerLock) {
+                if (world.tickingPlayer != null) {
+                    final Chunk.PlayerBlockModification playerBlockModification =
+                        world.tickingPlayer.modifiedBlocks.get(BlockPosition.a(i, j, k));
+                    if (playerBlockModification != null) {
+                        return playerBlockModification.getModifiedBlock();
+                    }
+                }
+            }
+        } else {
+            synchronized (EntityPlayer.tickingPlayerLock) {
+                if (EntityPlayer.tickingPlayer != null) {
+                    final Chunk.PlayerBlockModification playerBlockModification = EntityPlayer.tickingPlayer
+                        .modifiedBlocks.get(BlockPosition.a(i, j, k));
+                    if (playerBlockModification != null) {
+                        return playerBlockModification.getModifiedBlock();
+                    }
+                }
+            }
+        }
         return (IBlockData) this.blockIds.a(i, j, k);
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 0df3210a4..5fdcb17c5 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -41,6 +41,10 @@ import org.bukkit.inventory.MainHand;
 public class EntityPlayer extends EntityHuman implements ICrafting {
 
     private static final Logger LOGGER = LogManager.getLogger();
+
+    public static EntityPlayer tickingPlayer;
+    public static final Object tickingPlayerLock = new Object();
+
     public final Map<Long, Chunk.PlayerBlockModification> modifiedBlocks = new HashMap<>(); // Servett
     public String locale = null; // CraftBukkit - lowercase // Paper - default to null
     public PlayerConnection playerConnection;
@@ -360,6 +364,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
     public void tick() {
         synchronized (world.tickingPlayerLock) {
             world.tickingPlayer = this; // Servett
+            tickingPlayer = this;
 
             // CraftBukkit start
             if (this.joining) {
@@ -426,6 +431,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             this.advancementDataPlayer.b(this);
 
             world.tickingPlayer = null; // Servett
+            tickingPlayer = null;
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/IBlockAccess.java b/src/main/java/net/minecraft/server/IBlockAccess.java
index c5586e44d..a02dcd5a4 100644
--- a/src/main/java/net/minecraft/server/IBlockAccess.java
+++ b/src/main/java/net/minecraft/server/IBlockAccess.java
@@ -11,6 +11,7 @@ public interface IBlockAccess {
 
     IBlockData getTypeIfLoaded(BlockPosition blockposition); // Paper - if loaded util
     IBlockData getType(BlockPosition blockposition);
+    IBlockData getType(BlockPosition position, EntityPlayer tickingPlayer); // Servett
 
     Fluid getFluidIfLoaded(BlockPosition blockposition); // Paper - if loaded util
     Fluid getFluid(BlockPosition blockposition);
diff --git a/src/main/java/net/minecraft/server/ProtoChunk.java b/src/main/java/net/minecraft/server/ProtoChunk.java
index 7bad12eb0..31eff8cf0 100644
--- a/src/main/java/net/minecraft/server/ProtoChunk.java
+++ b/src/main/java/net/minecraft/server/ProtoChunk.java
@@ -103,8 +103,40 @@ public class ProtoChunk implements IChunkAccess {
     }
     // Paper end
 
+    @Override
+    public IBlockData getType(BlockPosition blockposition, EntityPlayer tickingPlayer) {
+        final Chunk.PlayerBlockModification playerBlockModification =
+            tickingPlayer.modifiedBlocks.get(blockposition.asLong());
+        if (playerBlockModification != null) {
+            return playerBlockModification.getModifiedBlock();
+        }
+
+        int i = blockposition.getY();
+
+        if (World.b(i)) {
+            return Blocks.VOID_AIR.getBlockData();
+        } else {
+            ChunkSection chunksection = this.getSections()[i >> 4];
+
+            return ChunkSection.a(chunksection) ? Blocks.AIR.getBlockData() : chunksection.getType(blockposition.getX() & 15, i & 15, blockposition.getZ() & 15);
+        }
+    }
+
     @Override
     public IBlockData getType(BlockPosition blockposition) {
+        if (world instanceof World) {
+            final World world = (World) this.world;
+            synchronized (world.tickingPlayerLock) {
+                if (world.tickingPlayer != null) {
+                    final Chunk.PlayerBlockModification playerBlockModification =
+                        world.tickingPlayer.modifiedBlocks.get(blockposition.asLong());
+                    if (playerBlockModification != null) {
+                        return playerBlockModification.getModifiedBlock();
+                    }
+                }
+            }
+        }
+
         int i = blockposition.getY();
 
         if (World.b(i)) {
@@ -218,7 +250,7 @@ public class ProtoChunk implements IChunkAccess {
 
     public ChunkSection a(int i) {
         if (this.j[i] == Chunk.a) {
-            this.j[i] = new ChunkSection(i << 4, this, this.world, true); // Paper - Anti-Xray
+            this.j[i] = new ChunkSection((World) world, i << 4, this, this.world, true); // Paper - Anti-Xray
         }
 
         return this.j[i];
diff --git a/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java b/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java
index ac6687754..accea3cd0 100644
--- a/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java
+++ b/src/main/java/net/minecraft/server/RegionLimitedWorldAccess.java
@@ -128,6 +128,23 @@ public class RegionLimitedWorldAccess implements GeneratorAccess {
 
     @Override
     public IBlockData getType(BlockPosition blockposition) {
+        synchronized (f.tickingPlayerLock) {
+            if (f.tickingPlayer != null) {
+                Chunk.PlayerBlockModification playerBlockModification = f.tickingPlayer.modifiedBlocks.get(blockposition.asLong());
+                if (playerBlockModification != null) {
+                    return playerBlockModification.getModifiedBlock();
+                }
+            }
+        }
+        return this.getChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4).getType(blockposition);
+    }
+
+    @Override
+    public IBlockData getType(BlockPosition blockposition, EntityPlayer tickingPlayer) {
+        Chunk.PlayerBlockModification playerBlockModification = tickingPlayer.modifiedBlocks.get(blockposition.asLong());
+        if (playerBlockModification != null) {
+            return playerBlockModification.getModifiedBlock();
+        }
         return this.getChunkAt(blockposition.getX() >> 4, blockposition.getZ() >> 4).getType(blockposition);
     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index b2a96882a..aa789136d 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -712,8 +712,21 @@ public abstract class World implements IIBlockAccess, GeneratorAccess, AutoClose
         return this.getChunkProvider().getLightEngine().a(enumskyblock).b(blockposition);
     }
 
+    @Override
+    public IBlockData getType(BlockPosition blockposition, EntityPlayer tickingPlayer) {
+        return getType(blockposition);
+    }
+
     @Override
     public IBlockData getType(BlockPosition blockposition) {
+        synchronized (tickingPlayerLock) {
+            if (tickingPlayer != null) {
+                Chunk.PlayerBlockModification playerBlockModification = tickingPlayer.modifiedBlocks.get(blockposition.asLong());
+                if (playerBlockModification != null) {
+                    return playerBlockModification.getModifiedBlock();
+                }
+            }
+        }
         // CraftBukkit start - tree generation
         if (captureTreeGeneration) {
             Iterator<CraftBlockState> it = capturedBlockStates.iterator();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index b45516140..4f08160d2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -37,7 +37,7 @@ public class CraftChunk implements Chunk {
     private final WorldServer worldServer;
     private final int x;
     private final int z;
-    private static final DataPaletteBlock<IBlockData> emptyBlockIDs = new ChunkSection(0).getBlocks();
+    private static final DataPaletteBlock<IBlockData> emptyBlockIDs = new ChunkSection(null, 0).getBlocks();
     private static final byte[] emptyLight = new byte[2048];
 
     public CraftChunk(net.minecraft.server.Chunk chunk) {
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java b/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
index 4570ed999..786761024 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
@@ -159,7 +159,8 @@ public final class CraftChunkData implements ChunkGenerator.ChunkData {
     private ChunkSection getChunkSection(int y, boolean create) {
         ChunkSection section = sections[y >> 4];
         if (create && section == null) {
-            sections[y >> 4] = section = new ChunkSection(y, null, world instanceof org.bukkit.craftbukkit.CraftWorld ? ((org.bukkit.craftbukkit.CraftWorld) world).getHandle() : null, true); // Paper - Anti-Xray
+            sections[y >> 4] = section = new ChunkSection(world instanceof org.bukkit.craftbukkit.CraftWorld ? ((org.bukkit.craftbukkit.CraftWorld) world).getHandle() : null, y, null,
+                world instanceof org.bukkit.craftbukkit.CraftWorld ? ((org.bukkit.craftbukkit.CraftWorld) world).getHandle() : null, true); // Paper - Anti-Xray
         }
         return section;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java b/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
index 5bae026dc..3c3fd398c 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
@@ -1,8 +1,5 @@
 package org.bukkit.craftbukkit.util;
 
-import java.util.List;
-import java.util.Random;
-import java.util.function.Predicate;
 import net.minecraft.server.AxisAlignedBB;
 import net.minecraft.server.BiomeBase;
 import net.minecraft.server.Block;
@@ -11,6 +8,7 @@ import net.minecraft.server.ChunkStatus;
 import net.minecraft.server.DifficultyDamageScaler;
 import net.minecraft.server.Entity;
 import net.minecraft.server.EntityHuman;
+import net.minecraft.server.EntityPlayer;
 import net.minecraft.server.EnumSkyBlock;
 import net.minecraft.server.Fluid;
 import net.minecraft.server.FluidType;
@@ -29,6 +27,10 @@ import net.minecraft.server.WorldBorder;
 import net.minecraft.server.WorldData;
 import net.minecraft.server.WorldProvider;
 
+import java.util.List;
+import java.util.Random;
+import java.util.function.Predicate;
+
 public class DummyGeneratorAccess implements GeneratorAccess {
 
     public static final GeneratorAccess INSTANCE = new DummyGeneratorAccess();
@@ -176,6 +178,11 @@ public class DummyGeneratorAccess implements GeneratorAccess {
         throw new UnsupportedOperationException("Not supported yet.");
     }
 
+    @Override
+    public IBlockData getType(BlockPosition position, EntityPlayer entityPlayer) {
+        return getType(position);
+    }
+
     @Override
     public Fluid getFluid(BlockPosition bp) {
         throw new UnsupportedOperationException("Not supported yet.");
-- 
2.20.1

