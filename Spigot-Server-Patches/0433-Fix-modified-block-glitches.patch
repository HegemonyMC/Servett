From 77ab2d13f370f6458a8a8f0fd268b775c25d393e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Alexander=20S=C3=B6derberg?= <sauilitired@gmail.com>
Date: Tue, 15 Oct 2019 15:51:33 +0200
Subject: [PATCH] Fix modified block glitches


diff --git a/src/main/java/net/minecraft/server/PacketPlayOutBlockBreak.java b/src/main/java/net/minecraft/server/PacketPlayOutBlockBreak.java
index d4106f348..01be4bb5c 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutBlockBreak.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutBlockBreak.java
@@ -7,7 +7,7 @@ import org.apache.logging.log4j.Logger;
 public class PacketPlayOutBlockBreak implements Packet<PacketListenerPlayOut> {
 
     private static final Logger LOGGER = LogManager.getLogger();
-    private BlockPosition c;
+    public BlockPosition c;
     private IBlockData d;
     PacketPlayInBlockDig.EnumPlayerDigType a;
     private boolean e;
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java b/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java
index 1a6f5a772..0d0977c25 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutBlockChange.java
@@ -4,7 +4,7 @@ import java.io.IOException;
 
 public class PacketPlayOutBlockChange implements Packet<PacketListenerPlayOut> {
 
-    private BlockPosition a;
+    public BlockPosition a;
     private IBlockAccess iblockaccess;
 
     public IBlockData block;
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java b/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java
index fe7566659..2ba49ec85 100644
--- a/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMultiBlockChange.java
@@ -9,14 +9,13 @@ public class PacketPlayOutMultiBlockChange implements Packet<PacketListenerPlayO
 
     public PacketPlayOutMultiBlockChange() {}
 
-    public PacketPlayOutMultiBlockChange(int i, short[] ashort, Chunk chunk) {
+    public PacketPlayOutMultiBlockChange(final EntityPlayer entityPlayer, int i, short[] ashort, Chunk chunk) {
         this.a = chunk.getPos();
         this.b = new PacketPlayOutMultiBlockChange.MultiBlockChangeInfo[i];
 
         for (int j = 0; j < this.b.length; ++j) {
-            this.b[j] = new PacketPlayOutMultiBlockChange.MultiBlockChangeInfo(ashort[j], chunk);
+            this.b[j] = new PacketPlayOutMultiBlockChange.MultiBlockChangeInfo(entityPlayer, ashort[j], chunk);
         }
-
     }
 
     @Override
@@ -61,9 +60,9 @@ public class PacketPlayOutMultiBlockChange implements Packet<PacketListenerPlayO
             this.c = iblockdata;
         }
 
-        public MultiBlockChangeInfo(short short0, Chunk chunk) {
+        public MultiBlockChangeInfo(EntityPlayer entityPlayer, short short0, Chunk chunk) {
             this.b = short0;
-            this.c = chunk.getType(this.a());
+            this.c = chunk.getType(this.a(), entityPlayer);
         }
 
         public BlockPosition a() {
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
index 34d0ab0d5..1eb767cfc 100644
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -5,6 +5,7 @@ import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.atomic.AtomicReferenceArray;
+import java.util.function.Function;
 import java.util.function.IntConsumer;
 import java.util.function.IntSupplier;
 import java.util.stream.Stream;
@@ -188,11 +189,15 @@ public class PlayerChunk {
             int j;
 
             if (this.u != 0 || this.t != 0) {
-                this.a(new PacketPlayOutLightUpdate(chunk.getPos(), this.lightEngine, this.u & ~this.s, this.t & ~this.s), true);
+                this.a(player -> new PacketPlayOutLightUpdate(chunk.getPos(), this.lightEngine, this.u & ~this.s, this.t & ~this.s), true);
                 i = this.u & this.s;
                 j = this.t & this.s;
                 if (i != 0 || j != 0) {
-                    this.a(new PacketPlayOutLightUpdate(chunk.getPos(), this.lightEngine, i, j), false);
+                    int finalJ = j;
+                    int finalI = i;
+                    this.a(player -> new PacketPlayOutLightUpdate(chunk.getPos(), this.lightEngine,
+                        finalI,
+                        finalJ), false);
                 }
 
                 this.u = 0;
@@ -208,14 +213,14 @@ public class PlayerChunk {
                 k = (this.dirtyBlocks[0] >> 8 & 15) + this.location.z * 16;
                 BlockPosition blockposition = new BlockPosition(i, j, k);
 
-                this.a(new PacketPlayOutBlockChange(world, blockposition), false);
+                this.a(player -> new PacketPlayOutBlockChange(world, blockposition), false);
                 if (world.getType(blockposition).getBlock().isTileEntity()) {
                     this.a(world, blockposition);
                 }
             } else if (this.dirtyCount == 64) {
-                this.a(new PacketPlayOutMapChunk(chunk, this.r, true), false); // Paper - Anti-Xray
+                this.a(player -> new PacketPlayOutMapChunk(chunk, this.r, true), false); // Paper - Anti-Xray
             } else if (this.dirtyCount != 0) {
-                this.a(new PacketPlayOutMultiBlockChange(this.dirtyCount, this.dirtyBlocks, chunk), false);
+                this.a(player -> new PacketPlayOutMultiBlockChange(player, this.dirtyCount, this.dirtyBlocks, chunk), false);
 
                 for (i = 0; i < this.dirtyCount; ++i) {
                     j = (this.dirtyBlocks[i] >> 12 & 15) + this.location.x * 16;
@@ -241,16 +246,18 @@ public class PlayerChunk {
             PacketPlayOutTileEntityData packetplayouttileentitydata = tileentity.getUpdatePacket();
 
             if (packetplayouttileentitydata != null) {
-                this.a(packetplayouttileentitydata, false);
+                this.a(player -> packetplayouttileentitydata, false);
             }
         }
 
     }
 
-    private void a(Packet<?> packet, boolean flag) {
-        this.players.a(this.location, flag).forEach((entityplayer) -> {
-            entityplayer.playerConnection.sendPacket(packet);
-        });
+    private void a(Function<EntityPlayer, Packet<?>> packetFunction, boolean flag) {
+        this.players.a(this.location, flag).forEach((entityPlayer -> {
+            final Packet<?> packet = packetFunction.apply(entityPlayer);
+            packet.process(entityPlayer.playerConnection);
+            entityPlayer.playerConnection.sendPacket(packet);
+        }));
     }
 
     public CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> a(ChunkStatus chunkstatus, PlayerChunkMap playerchunkmap) {
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 8e3708402..8d71f9bd0 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1517,7 +1517,13 @@ public class PlayerConnection implements PacketListenerPlayIn {
             }
         }
 
-        // Servett start
+        // Servett start: Check that we're not sending packets we shouldn't send
+        if (packet instanceof PacketPlayOutBlockBreak) {
+            PacketPlayOutBlockBreak packetPlayOutBlockBreak = (PacketPlayOutBlockBreak) packet;
+            if (player.modifiedBlocks.containsKey(packetPlayOutBlockBreak.c.asLong())) {
+                return;
+            }
+        }
         packet.process(playerConnection == null ? this : playerConnection);
         // Servett end
 
-- 
2.20.1

